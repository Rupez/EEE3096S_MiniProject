
EEE3096S_2022_Prac_3_ADCs_Interrupts_and_PWM_Student_Version.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003120  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080031e0  080031e0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080031e0  080031e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080031e0  080031e0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031e0  080031e0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031e0  080031e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031e4  080031e4  000131e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080031e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000010  080031f8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080031f8  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e724  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d32  00000000  00000000  0002e75c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  00030490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00031148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011e74  00000000  00000000  00031d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e35a  00000000  00000000  00043bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006fe86  00000000  00000000  00051f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c1dac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e48  00000000  00000000  000c1dfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080031c8 	.word	0x080031c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080031c8 	.word	0x080031c8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fbd3 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 f983 	bl	8000534 <MX_GPIO_Init>
  //MX_DMA_Init();
  //MX_USART2_UART_Init();
  MX_ADC_Init();
 800022e:	f000 f8a5 	bl	800037c <MX_ADC_Init>
  MX_TIM3_Init();
 8000232:	f000 f8ff 	bl	8000434 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //TO DO:
  //Create variables needed in while loop

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //Start the PWM on TIM3 Channel 4 (Green LED)
 8000236:	4b2f      	ldr	r3, [pc, #188]	; (80002f4 <main+0xd4>)
 8000238:	210c      	movs	r1, #12
 800023a:	0018      	movs	r0, r3
 800023c:	f001 fe0e 	bl	8001e5c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //To communicate message integrity with even parity
  uint16_t message;
  uint16_t parity = 0;
 8000240:	2316      	movs	r3, #22
 8000242:	18fb      	adds	r3, r7, r3
 8000244:	2200      	movs	r2, #0
 8000246:	801a      	strh	r2, [r3, #0]
  uint16_t count = 0;
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	801a      	strh	r2, [r3, #0]
  while (1)
  {
	  if (ACTIVATED)
 800024e:	4b2a      	ldr	r3, [pc, #168]	; (80002f8 <main+0xd8>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d049      	beq.n	80002ea <main+0xca>
	  {
		  //Set low to indicate transmission has started
		  changeLED(0);
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f852 	bl	8000300 <changeLED>
		  //Read from ADC
		  message = pollADC() << 4;
 800025c:	f000 fa26 	bl	80006ac <pollADC>
 8000260:	0003      	movs	r3, r0
 8000262:	b29a      	uxth	r2, r3
 8000264:	230e      	movs	r3, #14
 8000266:	18fb      	adds	r3, r7, r3
 8000268:	0112      	lsls	r2, r2, #4
 800026a:	801a      	strh	r2, [r3, #0]
		  //ADC value max is 4095 which needs 12 bits to represent.
		  //16th bit is for parity. Starts off at 0.
		  //Middle 3 bits tell how many readings have been sent so far.
		  uint16_t compare;

		  for (size_t i = 15; i > 3; --i)
 800026c:	230f      	movs	r3, #15
 800026e:	613b      	str	r3, [r7, #16]
 8000270:	e025      	b.n	80002be <main+0x9e>
		  {
			  compare = message & 1 << i;
 8000272:	2201      	movs	r2, #1
 8000274:	693b      	ldr	r3, [r7, #16]
 8000276:	409a      	lsls	r2, r3
 8000278:	0013      	movs	r3, r2
 800027a:	b21b      	sxth	r3, r3
 800027c:	220e      	movs	r2, #14
 800027e:	18ba      	adds	r2, r7, r2
 8000280:	2100      	movs	r1, #0
 8000282:	5e52      	ldrsh	r2, [r2, r1]
 8000284:	4013      	ands	r3, r2
 8000286:	b21a      	sxth	r2, r3
 8000288:	1dbb      	adds	r3, r7, #6
 800028a:	801a      	strh	r2, [r3, #0]
			  changeLED(compare);
 800028c:	1dbb      	adds	r3, r7, #6
 800028e:	881b      	ldrh	r3, [r3, #0]
 8000290:	0018      	movs	r0, r3
 8000292:	f000 f835 	bl	8000300 <changeLED>
			  if (compare)
 8000296:	1dbb      	adds	r3, r7, #6
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d007      	beq.n	80002ae <main+0x8e>
				  parity = !parity;
 800029e:	2116      	movs	r1, #22
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	425a      	negs	r2, r3
 80002a6:	4153      	adcs	r3, r2
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	801a      	strh	r2, [r3, #0]
			  HAL_Delay(DELAY);
 80002ae:	4b13      	ldr	r3, [pc, #76]	; (80002fc <main+0xdc>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fbf0 	bl	8000a98 <HAL_Delay>
		  for (size_t i = 15; i > 3; --i)
 80002b8:	693b      	ldr	r3, [r7, #16]
 80002ba:	3b01      	subs	r3, #1
 80002bc:	613b      	str	r3, [r7, #16]
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	2b03      	cmp	r3, #3
 80002c2:	d8d6      	bhi.n	8000272 <main+0x52>
		  }

		  for (size_t i = 2; i > -1; --i)
 80002c4:	2302      	movs	r3, #2
 80002c6:	60bb      	str	r3, [r7, #8]
 80002c8:	46c0      	nop			; (mov r8, r8)
			  if (compare)
			  	  parity = !parity;
			  HAL_Delay(DELAY);
		  }

		  changeLED(parity);
 80002ca:	2316      	movs	r3, #22
 80002cc:	18fb      	adds	r3, r7, r3
 80002ce:	881b      	ldrh	r3, [r3, #0]
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 f815 	bl	8000300 <changeLED>
		  HAL_Delay(DELAY);
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <main+0xdc>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	0018      	movs	r0, r3
 80002dc:	f000 fbdc 	bl	8000a98 <HAL_Delay>

		  incCount(&count);
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 f82c 	bl	8000340 <incCount>
 80002e8:	e7b1      	b.n	800024e <main+0x2e>

	  } else
		  //Set high to communicate end of transmission
		  changeLED(1);
 80002ea:	2001      	movs	r0, #1
 80002ec:	f000 f808 	bl	8000300 <changeLED>
	  if (ACTIVATED)
 80002f0:	e7ad      	b.n	800024e <main+0x2e>
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	200000b0 	.word	0x200000b0
 80002f8:	200001c0 	.word	0x200001c0
 80002fc:	20000000 	.word	0x20000000

08000300 <changeLED>:
  }
  /* USER CODE END 3 */
}

void changeLED(uint16_t on)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	0002      	movs	r2, r0
 8000308:	1dbb      	adds	r3, r7, #6
 800030a:	801a      	strh	r2, [r3, #0]
	if (on)
 800030c:	1dbb      	adds	r3, r7, #6
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d007      	beq.n	8000324 <changeLED+0x24>
		GPIOC->ODR |= GPIO_PIN_8;
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <changeLED+0x38>)
 8000316:	695a      	ldr	r2, [r3, #20]
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <changeLED+0x38>)
 800031a:	2180      	movs	r1, #128	; 0x80
 800031c:	0049      	lsls	r1, r1, #1
 800031e:	430a      	orrs	r2, r1
 8000320:	615a      	str	r2, [r3, #20]
	else
		GPIOC->ODR &= ~GPIO_PIN_8;
}
 8000322:	e005      	b.n	8000330 <changeLED+0x30>
		GPIOC->ODR &= ~GPIO_PIN_8;
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <changeLED+0x38>)
 8000326:	695a      	ldr	r2, [r3, #20]
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <changeLED+0x38>)
 800032a:	4904      	ldr	r1, [pc, #16]	; (800033c <changeLED+0x3c>)
 800032c:	400a      	ands	r2, r1
 800032e:	615a      	str	r2, [r3, #20]
}
 8000330:	46c0      	nop			; (mov r8, r8)
 8000332:	46bd      	mov	sp, r7
 8000334:	b002      	add	sp, #8
 8000336:	bd80      	pop	{r7, pc}
 8000338:	48000800 	.word	0x48000800
 800033c:	fffffeff 	.word	0xfffffeff

08000340 <incCount>:

void incCount(uint16_t* message_ptr)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	uint16_t msg = *message_ptr;
 8000348:	210e      	movs	r1, #14
 800034a:	187b      	adds	r3, r7, r1
 800034c:	687a      	ldr	r2, [r7, #4]
 800034e:	8812      	ldrh	r2, [r2, #0]
 8000350:	801a      	strh	r2, [r3, #0]
	++msg;
 8000352:	187b      	adds	r3, r7, r1
 8000354:	187a      	adds	r2, r7, r1
 8000356:	8812      	ldrh	r2, [r2, #0]
 8000358:	3201      	adds	r2, #1
 800035a:	801a      	strh	r2, [r3, #0]
	*message_ptr &= (msg & 0x07);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	187a      	adds	r2, r7, r1
 8000362:	8812      	ldrh	r2, [r2, #0]
 8000364:	4013      	ands	r3, r2
 8000366:	b29b      	uxth	r3, r3
 8000368:	2207      	movs	r2, #7
 800036a:	4013      	ands	r3, r2
 800036c:	b29a      	uxth	r2, r3
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	801a      	strh	r2, [r3, #0]
}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	46bd      	mov	sp, r7
 8000376:	b004      	add	sp, #16
 8000378:	bd80      	pop	{r7, pc}
	...

0800037c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	0018      	movs	r0, r3
 8000386:	230c      	movs	r3, #12
 8000388:	001a      	movs	r2, r3
 800038a:	2100      	movs	r1, #0
 800038c:	f002 ff14 	bl	80031b8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000390:	4b26      	ldr	r3, [pc, #152]	; (800042c <MX_ADC_Init+0xb0>)
 8000392:	4a27      	ldr	r2, [pc, #156]	; (8000430 <MX_ADC_Init+0xb4>)
 8000394:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000396:	4b25      	ldr	r3, [pc, #148]	; (800042c <MX_ADC_Init+0xb0>)
 8000398:	2200      	movs	r2, #0
 800039a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800039c:	4b23      	ldr	r3, [pc, #140]	; (800042c <MX_ADC_Init+0xb0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003a2:	4b22      	ldr	r3, [pc, #136]	; (800042c <MX_ADC_Init+0xb0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003a8:	4b20      	ldr	r3, [pc, #128]	; (800042c <MX_ADC_Init+0xb0>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003ae:	4b1f      	ldr	r3, [pc, #124]	; (800042c <MX_ADC_Init+0xb0>)
 80003b0:	2204      	movs	r2, #4
 80003b2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003b4:	4b1d      	ldr	r3, [pc, #116]	; (800042c <MX_ADC_Init+0xb0>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003ba:	4b1c      	ldr	r3, [pc, #112]	; (800042c <MX_ADC_Init+0xb0>)
 80003bc:	2200      	movs	r2, #0
 80003be:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80003c0:	4b1a      	ldr	r3, [pc, #104]	; (800042c <MX_ADC_Init+0xb0>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80003c6:	4b19      	ldr	r3, [pc, #100]	; (800042c <MX_ADC_Init+0xb0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003cc:	4b17      	ldr	r3, [pc, #92]	; (800042c <MX_ADC_Init+0xb0>)
 80003ce:	22c2      	movs	r2, #194	; 0xc2
 80003d0:	32ff      	adds	r2, #255	; 0xff
 80003d2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_ADC_Init+0xb0>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80003da:	4b14      	ldr	r3, [pc, #80]	; (800042c <MX_ADC_Init+0xb0>)
 80003dc:	2224      	movs	r2, #36	; 0x24
 80003de:	2100      	movs	r1, #0
 80003e0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <MX_ADC_Init+0xb0>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003e8:	4b10      	ldr	r3, [pc, #64]	; (800042c <MX_ADC_Init+0xb0>)
 80003ea:	0018      	movs	r0, r3
 80003ec:	f000 fb78 	bl	8000ae0 <HAL_ADC_Init>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003f4:	f000 f972 	bl	80006dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2207      	movs	r2, #7
 80003fc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2280      	movs	r2, #128	; 0x80
 8000402:	0152      	lsls	r2, r2, #5
 8000404:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	0552      	lsls	r2, r2, #21
 800040c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800040e:	1d3a      	adds	r2, r7, #4
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <MX_ADC_Init+0xb0>)
 8000412:	0011      	movs	r1, r2
 8000414:	0018      	movs	r0, r3
 8000416:	f000 fe13 	bl	8001040 <HAL_ADC_ConfigChannel>
 800041a:	1e03      	subs	r3, r0, #0
 800041c:	d001      	beq.n	8000422 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 800041e:	f000 f95d 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	46bd      	mov	sp, r7
 8000426:	b004      	add	sp, #16
 8000428:	bd80      	pop	{r7, pc}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	2000002c 	.word	0x2000002c
 8000430:	40012400 	.word	0x40012400

08000434 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b08e      	sub	sp, #56	; 0x38
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800043a:	2328      	movs	r3, #40	; 0x28
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	0018      	movs	r0, r3
 8000440:	2310      	movs	r3, #16
 8000442:	001a      	movs	r2, r3
 8000444:	2100      	movs	r1, #0
 8000446:	f002 feb7 	bl	80031b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800044a:	2320      	movs	r3, #32
 800044c:	18fb      	adds	r3, r7, r3
 800044e:	0018      	movs	r0, r3
 8000450:	2308      	movs	r3, #8
 8000452:	001a      	movs	r2, r3
 8000454:	2100      	movs	r1, #0
 8000456:	f002 feaf 	bl	80031b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800045a:	1d3b      	adds	r3, r7, #4
 800045c:	0018      	movs	r0, r3
 800045e:	231c      	movs	r3, #28
 8000460:	001a      	movs	r2, r3
 8000462:	2100      	movs	r1, #0
 8000464:	f002 fea8 	bl	80031b8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000468:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <MX_TIM3_Init+0xf4>)
 800046a:	4a30      	ldr	r2, [pc, #192]	; (800052c <MX_TIM3_Init+0xf8>)
 800046c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800046e:	4b2e      	ldr	r3, [pc, #184]	; (8000528 <MX_TIM3_Init+0xf4>)
 8000470:	2200      	movs	r2, #0
 8000472:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000474:	4b2c      	ldr	r3, [pc, #176]	; (8000528 <MX_TIM3_Init+0xf4>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 47999;
 800047a:	4b2b      	ldr	r3, [pc, #172]	; (8000528 <MX_TIM3_Init+0xf4>)
 800047c:	4a2c      	ldr	r2, [pc, #176]	; (8000530 <MX_TIM3_Init+0xfc>)
 800047e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000480:	4b29      	ldr	r3, [pc, #164]	; (8000528 <MX_TIM3_Init+0xf4>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000486:	4b28      	ldr	r3, [pc, #160]	; (8000528 <MX_TIM3_Init+0xf4>)
 8000488:	2280      	movs	r2, #128	; 0x80
 800048a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800048c:	4b26      	ldr	r3, [pc, #152]	; (8000528 <MX_TIM3_Init+0xf4>)
 800048e:	0018      	movs	r0, r3
 8000490:	f001 fc3c 	bl	8001d0c <HAL_TIM_Base_Init>
 8000494:	1e03      	subs	r3, r0, #0
 8000496:	d001      	beq.n	800049c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000498:	f000 f920 	bl	80006dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800049c:	2128      	movs	r1, #40	; 0x28
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2280      	movs	r2, #128	; 0x80
 80004a2:	0152      	lsls	r2, r2, #5
 80004a4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004a6:	187a      	adds	r2, r7, r1
 80004a8:	4b1f      	ldr	r3, [pc, #124]	; (8000528 <MX_TIM3_Init+0xf4>)
 80004aa:	0011      	movs	r1, r2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f001 fe53 	bl	8002158 <HAL_TIM_ConfigClockSource>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d001      	beq.n	80004ba <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80004b6:	f000 f911 	bl	80006dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80004ba:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MX_TIM3_Init+0xf4>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 fc75 	bl	8001dac <HAL_TIM_PWM_Init>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80004c6:	f000 f909 	bl	80006dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004ca:	2120      	movs	r1, #32
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004d8:	187a      	adds	r2, r7, r1
 80004da:	4b13      	ldr	r3, [pc, #76]	; (8000528 <MX_TIM3_Init+0xf4>)
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f002 fa48 	bl	8002974 <HAL_TIMEx_MasterConfigSynchronization>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d001      	beq.n	80004ec <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80004e8:	f000 f8f8 	bl	80006dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	2260      	movs	r2, #96	; 0x60
 80004f0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	2200      	movs	r2, #0
 80004f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000504:	1d39      	adds	r1, r7, #4
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <MX_TIM3_Init+0xf4>)
 8000508:	220c      	movs	r2, #12
 800050a:	0018      	movs	r0, r3
 800050c:	f001 fd5e 	bl	8001fcc <HAL_TIM_PWM_ConfigChannel>
 8000510:	1e03      	subs	r3, r0, #0
 8000512:	d001      	beq.n	8000518 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000514:	f000 f8e2 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <MX_TIM3_Init+0xf4>)
 800051a:	0018      	movs	r0, r3
 800051c:	f000 f9a0 	bl	8000860 <HAL_TIM_MspPostInit>

}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	b00e      	add	sp, #56	; 0x38
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200000b0 	.word	0x200000b0
 800052c:	40000400 	.word	0x40000400
 8000530:	0000bb7f 	.word	0x0000bb7f

08000534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b08b      	sub	sp, #44	; 0x2c
 8000538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053a:	2414      	movs	r4, #20
 800053c:	193b      	adds	r3, r7, r4
 800053e:	0018      	movs	r0, r3
 8000540:	2314      	movs	r3, #20
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f002 fe37 	bl	80031b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054a:	4b43      	ldr	r3, [pc, #268]	; (8000658 <MX_GPIO_Init+0x124>)
 800054c:	695a      	ldr	r2, [r3, #20]
 800054e:	4b42      	ldr	r3, [pc, #264]	; (8000658 <MX_GPIO_Init+0x124>)
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	03c9      	lsls	r1, r1, #15
 8000554:	430a      	orrs	r2, r1
 8000556:	615a      	str	r2, [r3, #20]
 8000558:	4b3f      	ldr	r3, [pc, #252]	; (8000658 <MX_GPIO_Init+0x124>)
 800055a:	695a      	ldr	r2, [r3, #20]
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	03db      	lsls	r3, r3, #15
 8000560:	4013      	ands	r3, r2
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b3c      	ldr	r3, [pc, #240]	; (8000658 <MX_GPIO_Init+0x124>)
 8000568:	695a      	ldr	r2, [r3, #20]
 800056a:	4b3b      	ldr	r3, [pc, #236]	; (8000658 <MX_GPIO_Init+0x124>)
 800056c:	2180      	movs	r1, #128	; 0x80
 800056e:	0289      	lsls	r1, r1, #10
 8000570:	430a      	orrs	r2, r1
 8000572:	615a      	str	r2, [r3, #20]
 8000574:	4b38      	ldr	r3, [pc, #224]	; (8000658 <MX_GPIO_Init+0x124>)
 8000576:	695a      	ldr	r2, [r3, #20]
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	029b      	lsls	r3, r3, #10
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b35      	ldr	r3, [pc, #212]	; (8000658 <MX_GPIO_Init+0x124>)
 8000584:	695a      	ldr	r2, [r3, #20]
 8000586:	4b34      	ldr	r3, [pc, #208]	; (8000658 <MX_GPIO_Init+0x124>)
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	0309      	lsls	r1, r1, #12
 800058c:	430a      	orrs	r2, r1
 800058e:	615a      	str	r2, [r3, #20]
 8000590:	4b31      	ldr	r3, [pc, #196]	; (8000658 <MX_GPIO_Init+0x124>)
 8000592:	695a      	ldr	r2, [r3, #20]
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	031b      	lsls	r3, r3, #12
 8000598:	4013      	ands	r3, r2
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	4b2e      	ldr	r3, [pc, #184]	; (8000658 <MX_GPIO_Init+0x124>)
 80005a0:	695a      	ldr	r2, [r3, #20]
 80005a2:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <MX_GPIO_Init+0x124>)
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	02c9      	lsls	r1, r1, #11
 80005a8:	430a      	orrs	r2, r1
 80005aa:	615a      	str	r2, [r3, #20]
 80005ac:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <MX_GPIO_Init+0x124>)
 80005ae:	695a      	ldr	r2, [r3, #20]
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	02db      	lsls	r3, r3, #11
 80005b4:	4013      	ands	r3, r2
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80005ba:	2380      	movs	r3, #128	; 0x80
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	4827      	ldr	r0, [pc, #156]	; (800065c <MX_GPIO_Init+0x128>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	0019      	movs	r1, r3
 80005c4:	f001 fb5e 	bl	8001c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	2201      	movs	r2, #1
 80005cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005ce:	193b      	adds	r3, r7, r4
 80005d0:	2284      	movs	r2, #132	; 0x84
 80005d2:	0392      	lsls	r2, r2, #14
 80005d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005dc:	193a      	adds	r2, r7, r4
 80005de:	2390      	movs	r3, #144	; 0x90
 80005e0:	05db      	lsls	r3, r3, #23
 80005e2:	0011      	movs	r1, r2
 80005e4:	0018      	movs	r0, r3
 80005e6:	f001 f9dd 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80005ea:	0021      	movs	r1, r4
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	0052      	lsls	r2, r2, #1
 80005f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f4:	000c      	movs	r4, r1
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	2201      	movs	r2, #1
 80005fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	193b      	adds	r3, r7, r4
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000608:	193b      	adds	r3, r7, r4
 800060a:	4a14      	ldr	r2, [pc, #80]	; (800065c <MX_GPIO_Init+0x128>)
 800060c:	0019      	movs	r1, r3
 800060e:	0010      	movs	r0, r2
 8000610:	f001 f9c8 	bl	80019a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000614:	0021      	movs	r1, r4
 8000616:	187b      	adds	r3, r7, r1
 8000618:	22c0      	movs	r2, #192	; 0xc0
 800061a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2212      	movs	r2, #18
 8000620:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2203      	movs	r2, #3
 800062c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2201      	movs	r2, #1
 8000632:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	187b      	adds	r3, r7, r1
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <MX_GPIO_Init+0x12c>)
 8000638:	0019      	movs	r1, r3
 800063a:	0010      	movs	r0, r2
 800063c:	f001 f9b2 	bl	80019a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	2005      	movs	r0, #5
 8000646:	f000 fff7 	bl	8001638 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800064a:	2005      	movs	r0, #5
 800064c:	f001 f809 	bl	8001662 <HAL_NVIC_EnableIRQ>

}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b00b      	add	sp, #44	; 0x2c
 8000656:	bd90      	pop	{r4, r7, pc}
 8000658:	40021000 	.word	0x40021000
 800065c:	48000800 	.word	0x48000800
 8000660:	48000400 	.word	0x48000400

08000664 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
	uint32_t current_tick = HAL_GetTick();
 800066a:	f000 fa0b 	bl	8000a84 <HAL_GetTick>
 800066e:	0003      	movs	r3, r0
 8000670:	607b      	str	r3, [r7, #4]

	if (current_tick - DB_LAST_TICK > 50)
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <EXTI0_1_IRQHandler+0x40>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	1ad3      	subs	r3, r2, r3
 800067a:	2b32      	cmp	r3, #50	; 0x32
 800067c:	d90a      	bls.n	8000694 <EXTI0_1_IRQHandler+0x30>
	{
		ACTIVATED = !ACTIVATED;
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <EXTI0_1_IRQHandler+0x44>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	425a      	negs	r2, r3
 8000684:	4153      	adcs	r3, r2
 8000686:	b2db      	uxtb	r3, r3
 8000688:	001a      	movs	r2, r3
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <EXTI0_1_IRQHandler+0x44>)
 800068c:	601a      	str	r2, [r3, #0]
		DB_LAST_TICK = current_tick;
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <EXTI0_1_IRQHandler+0x40>)
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	601a      	str	r2, [r3, #0]
	}

	HAL_GPIO_EXTI_IRQHandler(B1_Pin); // Clear interrupt flags
 8000694:	2001      	movs	r0, #1
 8000696:	f001 fb13 	bl	8001cc0 <HAL_GPIO_EXTI_IRQHandler>
}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b002      	add	sp, #8
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	200001c4 	.word	0x200001c4
 80006a8:	200001c0 	.word	0x200001c0

080006ac <pollADC>:

//Gets value from ADC
uint32_t pollADC(void){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc);
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <pollADC+0x2c>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fb53 	bl	8000d60 <HAL_ADC_Start>
	int val = HAL_ADC_GetValue(&hadc);
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <pollADC+0x2c>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f000 fbe3 	bl	8000e88 <HAL_ADC_GetValue>
 80006c2:	0003      	movs	r3, r0
 80006c4:	607b      	str	r3, [r7, #4]
	HAL_ADC_Stop(&hadc);
 80006c6:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <pollADC+0x2c>)
 80006c8:	0018      	movs	r0, r3
 80006ca:	f000 fb9d 	bl	8000e08 <HAL_ADC_Stop>
	return val;
 80006ce:	687b      	ldr	r3, [r7, #4]
}
 80006d0:	0018      	movs	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b002      	add	sp, #8
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000002c 	.word	0x2000002c

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <Error_Handler+0x8>
	...

080006e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <HAL_MspInit+0x44>)
 80006f0:	699a      	ldr	r2, [r3, #24]
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <HAL_MspInit+0x44>)
 80006f4:	2101      	movs	r1, #1
 80006f6:	430a      	orrs	r2, r1
 80006f8:	619a      	str	r2, [r3, #24]
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <HAL_MspInit+0x44>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	2201      	movs	r2, #1
 8000700:	4013      	ands	r3, r2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <HAL_MspInit+0x44>)
 8000708:	69da      	ldr	r2, [r3, #28]
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <HAL_MspInit+0x44>)
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	0549      	lsls	r1, r1, #21
 8000710:	430a      	orrs	r2, r1
 8000712:	61da      	str	r2, [r3, #28]
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_MspInit+0x44>)
 8000716:	69da      	ldr	r2, [r3, #28]
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	055b      	lsls	r3, r3, #21
 800071c:	4013      	ands	r3, r2
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b002      	add	sp, #8
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b08b      	sub	sp, #44	; 0x2c
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	2414      	movs	r4, #20
 800073a:	193b      	adds	r3, r7, r4
 800073c:	0018      	movs	r0, r3
 800073e:	2314      	movs	r3, #20
 8000740:	001a      	movs	r2, r3
 8000742:	2100      	movs	r1, #0
 8000744:	f002 fd38 	bl	80031b8 <memset>
  if(hadc->Instance==ADC1)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a31      	ldr	r2, [pc, #196]	; (8000814 <HAL_ADC_MspInit+0xe4>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d15b      	bne.n	800080a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000752:	4b31      	ldr	r3, [pc, #196]	; (8000818 <HAL_ADC_MspInit+0xe8>)
 8000754:	699a      	ldr	r2, [r3, #24]
 8000756:	4b30      	ldr	r3, [pc, #192]	; (8000818 <HAL_ADC_MspInit+0xe8>)
 8000758:	2180      	movs	r1, #128	; 0x80
 800075a:	0089      	lsls	r1, r1, #2
 800075c:	430a      	orrs	r2, r1
 800075e:	619a      	str	r2, [r3, #24]
 8000760:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <HAL_ADC_MspInit+0xe8>)
 8000762:	699a      	ldr	r2, [r3, #24]
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	4013      	ands	r3, r2
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <HAL_ADC_MspInit+0xe8>)
 8000770:	695a      	ldr	r2, [r3, #20]
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <HAL_ADC_MspInit+0xe8>)
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	0289      	lsls	r1, r1, #10
 8000778:	430a      	orrs	r2, r1
 800077a:	615a      	str	r2, [r3, #20]
 800077c:	4b26      	ldr	r3, [pc, #152]	; (8000818 <HAL_ADC_MspInit+0xe8>)
 800077e:	695a      	ldr	r2, [r3, #20]
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	029b      	lsls	r3, r3, #10
 8000784:	4013      	ands	r3, r2
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800078a:	193b      	adds	r3, r7, r4
 800078c:	2280      	movs	r2, #128	; 0x80
 800078e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2203      	movs	r2, #3
 8000794:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	193b      	adds	r3, r7, r4
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	193a      	adds	r2, r7, r4
 800079e:	2390      	movs	r3, #144	; 0x90
 80007a0:	05db      	lsls	r3, r3, #23
 80007a2:	0011      	movs	r1, r2
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 f8fd 	bl	80019a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <HAL_ADC_MspInit+0xec>)
 80007ac:	4a1c      	ldr	r2, [pc, #112]	; (8000820 <HAL_ADC_MspInit+0xf0>)
 80007ae:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007b0:	4b1a      	ldr	r3, [pc, #104]	; (800081c <HAL_ADC_MspInit+0xec>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <HAL_ADC_MspInit+0xec>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <HAL_ADC_MspInit+0xec>)
 80007be:	2280      	movs	r2, #128	; 0x80
 80007c0:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <HAL_ADC_MspInit+0xec>)
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <HAL_ADC_MspInit+0xec>)
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	00d2      	lsls	r2, r2, #3
 80007d0:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80007d2:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_ADC_MspInit+0xec>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80007d8:	4b10      	ldr	r3, [pc, #64]	; (800081c <HAL_ADC_MspInit+0xec>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80007de:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HAL_ADC_MspInit+0xec>)
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 ff5b 	bl	800169c <HAL_DMA_Init>
 80007e6:	1e03      	subs	r3, r0, #0
 80007e8:	d001      	beq.n	80007ee <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80007ea:	f7ff ff77 	bl	80006dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4a0a      	ldr	r2, [pc, #40]	; (800081c <HAL_ADC_MspInit+0xec>)
 80007f2:	631a      	str	r2, [r3, #48]	; 0x30
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <HAL_ADC_MspInit+0xec>)
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	200c      	movs	r0, #12
 8000800:	f000 ff1a 	bl	8001638 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8000804:	200c      	movs	r0, #12
 8000806:	f000 ff2c 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	46bd      	mov	sp, r7
 800080e:	b00b      	add	sp, #44	; 0x2c
 8000810:	bd90      	pop	{r4, r7, pc}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	40012400 	.word	0x40012400
 8000818:	40021000 	.word	0x40021000
 800081c:	2000006c 	.word	0x2000006c
 8000820:	40020008 	.word	0x40020008

08000824 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a09      	ldr	r2, [pc, #36]	; (8000858 <HAL_TIM_Base_MspInit+0x34>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d10b      	bne.n	800084e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <HAL_TIM_Base_MspInit+0x38>)
 8000838:	69da      	ldr	r2, [r3, #28]
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_TIM_Base_MspInit+0x38>)
 800083c:	2102      	movs	r1, #2
 800083e:	430a      	orrs	r2, r1
 8000840:	61da      	str	r2, [r3, #28]
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <HAL_TIM_Base_MspInit+0x38>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	2202      	movs	r2, #2
 8000848:	4013      	ands	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	b004      	add	sp, #16
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	40000400 	.word	0x40000400
 800085c:	40021000 	.word	0x40021000

08000860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b089      	sub	sp, #36	; 0x24
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	240c      	movs	r4, #12
 800086a:	193b      	adds	r3, r7, r4
 800086c:	0018      	movs	r0, r3
 800086e:	2314      	movs	r3, #20
 8000870:	001a      	movs	r2, r3
 8000872:	2100      	movs	r1, #0
 8000874:	f002 fca0 	bl	80031b8 <memset>
  if(htim->Instance==TIM3)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <HAL_TIM_MspPostInit+0x74>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d124      	bne.n	80008cc <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_TIM_MspPostInit+0x78>)
 8000884:	695a      	ldr	r2, [r3, #20]
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <HAL_TIM_MspPostInit+0x78>)
 8000888:	2180      	movs	r1, #128	; 0x80
 800088a:	0309      	lsls	r1, r1, #12
 800088c:	430a      	orrs	r2, r1
 800088e:	615a      	str	r2, [r3, #20]
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_TIM_MspPostInit+0x78>)
 8000892:	695a      	ldr	r2, [r3, #20]
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	031b      	lsls	r3, r3, #12
 8000898:	4013      	ands	r3, r2
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	2280      	movs	r2, #128	; 0x80
 80008a2:	0092      	lsls	r2, r2, #2
 80008a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	0021      	movs	r1, r4
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2202      	movs	r2, #2
 80008ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	4a06      	ldr	r2, [pc, #24]	; (80008dc <HAL_TIM_MspPostInit+0x7c>)
 80008c4:	0019      	movs	r1, r3
 80008c6:	0010      	movs	r0, r2
 80008c8:	f001 f86c 	bl	80019a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b009      	add	sp, #36	; 0x24
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	40000400 	.word	0x40000400
 80008d8:	40021000 	.word	0x40021000
 80008dc:	48000800 	.word	0x48000800

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008f0:	46c0      	nop			; (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f8ac 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000914:	4b03      	ldr	r3, [pc, #12]	; (8000924 <DMA1_Channel1_IRQHandler+0x14>)
 8000916:	0018      	movs	r0, r3
 8000918:	f000 ff85 	bl	8001826 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	2000006c 	.word	0x2000006c

08000928 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800092c:	4b03      	ldr	r3, [pc, #12]	; (800093c <DMA1_Channel4_5_IRQHandler+0x14>)
 800092e:	0018      	movs	r0, r3
 8000930:	f000 ff79 	bl	8001826 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	2000017c 	.word	0x2000017c

08000940 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8000944:	4b03      	ldr	r3, [pc, #12]	; (8000954 <ADC1_COMP_IRQHandler+0x14>)
 8000946:	0018      	movs	r0, r3
 8000948:	f000 faaa 	bl	8000ea0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800094c:	46c0      	nop			; (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	2000002c 	.word	0x2000002c

08000958 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <USART2_IRQHandler+0x14>)
 800095e:	0018      	movs	r0, r3
 8000960:	f002 f866 	bl	8002a30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	200000f8 	.word	0x200000f8

08000970 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
	...

0800097c <Reset_Handler>:
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <LoopForever+0x2>)
 800097e:	4685      	mov	sp, r0
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <LoopForever+0x6>)
 8000982:	490e      	ldr	r1, [pc, #56]	; (80009bc <LoopForever+0xa>)
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <LoopForever+0xe>)
 8000986:	2300      	movs	r3, #0
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:
 800098a:	58d4      	ldr	r4, [r2, r3]
 800098c:	50c4      	str	r4, [r0, r3]
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:
 8000990:	18c4      	adds	r4, r0, r3
 8000992:	428c      	cmp	r4, r1
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <LoopForever+0x12>)
 8000998:	4c0b      	ldr	r4, [pc, #44]	; (80009c8 <LoopForever+0x16>)
 800099a:	2300      	movs	r3, #0
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:
 80009a2:	42a2      	cmp	r2, r4
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>
 80009a6:	f7ff ffe3 	bl	8000970 <SystemInit>
 80009aa:	f002 fbe1 	bl	8003170 <__libc_init_array>
 80009ae:	f7ff fc37 	bl	8000220 <main>

080009b2 <LoopForever>:
 80009b2:	e7fe      	b.n	80009b2 <LoopForever>
 80009b4:	20002000 	.word	0x20002000
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20000010 	.word	0x20000010
 80009c0:	080031e8 	.word	0x080031e8
 80009c4:	20000010 	.word	0x20000010
 80009c8:	200001cc 	.word	0x200001cc

080009cc <CEC_CAN_IRQHandler>:
 80009cc:	e7fe      	b.n	80009cc <CEC_CAN_IRQHandler>
	...

080009d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <HAL_Init+0x24>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_Init+0x24>)
 80009da:	2110      	movs	r1, #16
 80009dc:	430a      	orrs	r2, r1
 80009de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 f809 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e6:	f7ff fe7f 	bl	80006e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	40022000 	.word	0x40022000

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_InitTick+0x5c>)
 8000a02:	681c      	ldr	r4, [r3, #0]
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <HAL_InitTick+0x60>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	0019      	movs	r1, r3
 8000a0a:	23fa      	movs	r3, #250	; 0xfa
 8000a0c:	0098      	lsls	r0, r3, #2
 8000a0e:	f7ff fb7b 	bl	8000108 <__udivsi3>
 8000a12:	0003      	movs	r3, r0
 8000a14:	0019      	movs	r1, r3
 8000a16:	0020      	movs	r0, r4
 8000a18:	f7ff fb76 	bl	8000108 <__udivsi3>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 fe2f 	bl	8001682 <HAL_SYSTICK_Config>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e00f      	b.n	8000a4c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d80b      	bhi.n	8000a4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	2301      	movs	r3, #1
 8000a36:	425b      	negs	r3, r3
 8000a38:	2200      	movs	r2, #0
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 fdfc 	bl	8001638 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_InitTick+0x64>)
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b003      	add	sp, #12
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	20000004 	.word	0x20000004
 8000a58:	2000000c 	.word	0x2000000c
 8000a5c:	20000008 	.word	0x20000008

08000a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x1c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	001a      	movs	r2, r3
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x20>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	18d2      	adds	r2, r2, r3
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_IncTick+0x20>)
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	2000000c 	.word	0x2000000c
 8000a80:	200001c8 	.word	0x200001c8

08000a84 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b02      	ldr	r3, [pc, #8]	; (8000a94 <HAL_GetTick+0x10>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	200001c8 	.word	0x200001c8

08000a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff fff0 	bl	8000a84 <HAL_GetTick>
 8000aa4:	0003      	movs	r3, r0
 8000aa6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	d005      	beq.n	8000abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_Delay+0x44>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	189b      	adds	r3, r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	f7ff ffe0 	bl	8000a84 <HAL_GetTick>
 8000ac4:	0002      	movs	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f7      	bhi.n	8000ac0 <HAL_Delay+0x28>
  {
  }
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b004      	add	sp, #16
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	2000000c 	.word	0x2000000c

08000ae0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae8:	230f      	movs	r3, #15
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d101      	bne.n	8000afe <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e125      	b.n	8000d4a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d10a      	bne.n	8000b1c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2234      	movs	r2, #52	; 0x34
 8000b10:	2100      	movs	r1, #0
 8000b12:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff fe0a 	bl	8000730 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b20:	2210      	movs	r2, #16
 8000b22:	4013      	ands	r3, r2
 8000b24:	d000      	beq.n	8000b28 <HAL_ADC_Init+0x48>
 8000b26:	e103      	b.n	8000d30 <HAL_ADC_Init+0x250>
 8000b28:	230f      	movs	r3, #15
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d000      	beq.n	8000b34 <HAL_ADC_Init+0x54>
 8000b32:	e0fd      	b.n	8000d30 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000b3e:	d000      	beq.n	8000b42 <HAL_ADC_Init+0x62>
 8000b40:	e0f6      	b.n	8000d30 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b46:	4a83      	ldr	r2, [pc, #524]	; (8000d54 <HAL_ADC_Init+0x274>)
 8000b48:	4013      	ands	r3, r2
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	431a      	orrs	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	2203      	movs	r2, #3
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d112      	bne.n	8000b86 <HAL_ADC_Init+0xa6>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2201      	movs	r2, #1
 8000b68:	4013      	ands	r3, r2
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d009      	beq.n	8000b82 <HAL_ADC_Init+0xa2>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	68da      	ldr	r2, [r3, #12]
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	021b      	lsls	r3, r3, #8
 8000b78:	401a      	ands	r2, r3
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	021b      	lsls	r3, r3, #8
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d101      	bne.n	8000b86 <HAL_ADC_Init+0xa6>
 8000b82:	2301      	movs	r3, #1
 8000b84:	e000      	b.n	8000b88 <HAL_ADC_Init+0xa8>
 8000b86:	2300      	movs	r3, #0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d116      	bne.n	8000bba <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	2218      	movs	r2, #24
 8000b94:	4393      	bics	r3, r2
 8000b96:	0019      	movs	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	691b      	ldr	r3, [r3, #16]
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	0899      	lsrs	r1, r3, #2
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	68da      	ldr	r2, [r3, #12]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4964      	ldr	r1, [pc, #400]	; (8000d58 <HAL_ADC_Init+0x278>)
 8000bc6:	400a      	ands	r2, r1
 8000bc8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	7e1b      	ldrb	r3, [r3, #24]
 8000bce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7e5b      	ldrb	r3, [r3, #25]
 8000bd4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000bd6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7e9b      	ldrb	r3, [r3, #26]
 8000bdc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000bde:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d002      	beq.n	8000bee <HAL_ADC_Init+0x10e>
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	015b      	lsls	r3, r3, #5
 8000bec:	e000      	b.n	8000bf0 <HAL_ADC_Init+0x110>
 8000bee:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000bf0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000bf6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	691b      	ldr	r3, [r3, #16]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d101      	bne.n	8000c04 <HAL_ADC_Init+0x124>
 8000c00:	2304      	movs	r3, #4
 8000c02:	e000      	b.n	8000c06 <HAL_ADC_Init+0x126>
 8000c04:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000c06:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2124      	movs	r1, #36	; 0x24
 8000c0c:	5c5b      	ldrb	r3, [r3, r1]
 8000c0e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000c10:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7edb      	ldrb	r3, [r3, #27]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d115      	bne.n	8000c4c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7e9b      	ldrb	r3, [r3, #26]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d105      	bne.n	8000c34 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	0252      	lsls	r2, r2, #9
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	e00b      	b.n	8000c4c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c38:	2220      	movs	r2, #32
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c44:	2201      	movs	r2, #1
 8000c46:	431a      	orrs	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	69da      	ldr	r2, [r3, #28]
 8000c50:	23c2      	movs	r3, #194	; 0xc2
 8000c52:	33ff      	adds	r3, #255	; 0xff
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d007      	beq.n	8000c68 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000c60:	4313      	orrs	r3, r2
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	68d9      	ldr	r1, [r3, #12]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	430a      	orrs	r2, r1
 8000c76:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	055b      	lsls	r3, r3, #21
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d01b      	beq.n	8000cbc <HAL_ADC_Init+0x1dc>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d017      	beq.n	8000cbc <HAL_ADC_Init+0x1dc>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d013      	beq.n	8000cbc <HAL_ADC_Init+0x1dc>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	d00f      	beq.n	8000cbc <HAL_ADC_Init+0x1dc>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca0:	2b04      	cmp	r3, #4
 8000ca2:	d00b      	beq.n	8000cbc <HAL_ADC_Init+0x1dc>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca8:	2b05      	cmp	r3, #5
 8000caa:	d007      	beq.n	8000cbc <HAL_ADC_Init+0x1dc>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb0:	2b06      	cmp	r3, #6
 8000cb2:	d003      	beq.n	8000cbc <HAL_ADC_Init+0x1dc>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb8:	2b07      	cmp	r3, #7
 8000cba:	d112      	bne.n	8000ce2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	695a      	ldr	r2, [r3, #20]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2107      	movs	r1, #7
 8000cc8:	438a      	bics	r2, r1
 8000cca:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6959      	ldr	r1, [r3, #20]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd6:	2207      	movs	r2, #7
 8000cd8:	401a      	ands	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	4a1c      	ldr	r2, [pc, #112]	; (8000d5c <HAL_ADC_Init+0x27c>)
 8000cea:	4013      	ands	r3, r2
 8000cec:	68ba      	ldr	r2, [r7, #8]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d10b      	bne.n	8000d0a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	4393      	bics	r3, r2
 8000d00:	2201      	movs	r2, #1
 8000d02:	431a      	orrs	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d08:	e01c      	b.n	8000d44 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d0e:	2212      	movs	r2, #18
 8000d10:	4393      	bics	r3, r2
 8000d12:	2210      	movs	r2, #16
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d1e:	2201      	movs	r2, #1
 8000d20:	431a      	orrs	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000d26:	230f      	movs	r3, #15
 8000d28:	18fb      	adds	r3, r7, r3
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000d2e:	e009      	b.n	8000d44 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d34:	2210      	movs	r2, #16
 8000d36:	431a      	orrs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	18fb      	adds	r3, r7, r3
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d44:	230f      	movs	r3, #15
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	781b      	ldrb	r3, [r3, #0]
}
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b004      	add	sp, #16
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	fffffefd 	.word	0xfffffefd
 8000d58:	fffe0219 	.word	0xfffe0219
 8000d5c:	833fffe7 	.word	0x833fffe7

08000d60 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d68:	230f      	movs	r3, #15
 8000d6a:	18fb      	adds	r3, r7, r3
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	2204      	movs	r2, #4
 8000d78:	4013      	ands	r3, r2
 8000d7a:	d138      	bne.n	8000dee <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2234      	movs	r2, #52	; 0x34
 8000d80:	5c9b      	ldrb	r3, [r3, r2]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d101      	bne.n	8000d8a <HAL_ADC_Start+0x2a>
 8000d86:	2302      	movs	r3, #2
 8000d88:	e038      	b.n	8000dfc <HAL_ADC_Start+0x9c>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2234      	movs	r2, #52	; 0x34
 8000d8e:	2101      	movs	r1, #1
 8000d90:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7e5b      	ldrb	r3, [r3, #25]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d007      	beq.n	8000daa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000d9a:	230f      	movs	r3, #15
 8000d9c:	18fc      	adds	r4, r7, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	0018      	movs	r0, r3
 8000da2:	f000 fa5b 	bl	800125c <ADC_Enable>
 8000da6:	0003      	movs	r3, r0
 8000da8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000daa:	230f      	movs	r3, #15
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d120      	bne.n	8000df6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000db8:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <HAL_ADC_Start+0xa4>)
 8000dba:	4013      	ands	r3, r2
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	0052      	lsls	r2, r2, #1
 8000dc0:	431a      	orrs	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2234      	movs	r2, #52	; 0x34
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	221c      	movs	r2, #28
 8000dda:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2104      	movs	r1, #4
 8000de8:	430a      	orrs	r2, r1
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	e003      	b.n	8000df6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000dee:	230f      	movs	r3, #15
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	2202      	movs	r2, #2
 8000df4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000df6:	230f      	movs	r3, #15
 8000df8:	18fb      	adds	r3, r7, r3
 8000dfa:	781b      	ldrb	r3, [r3, #0]
}
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b005      	add	sp, #20
 8000e02:	bd90      	pop	{r4, r7, pc}
 8000e04:	fffff0fe 	.word	0xfffff0fe

08000e08 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8000e08:	b5b0      	push	{r4, r5, r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e10:	230f      	movs	r3, #15
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2234      	movs	r2, #52	; 0x34
 8000e1c:	5c9b      	ldrb	r3, [r3, r2]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d101      	bne.n	8000e26 <HAL_ADC_Stop+0x1e>
 8000e22:	2302      	movs	r3, #2
 8000e24:	e029      	b.n	8000e7a <HAL_ADC_Stop+0x72>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2234      	movs	r2, #52	; 0x34
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000e2e:	250f      	movs	r5, #15
 8000e30:	197c      	adds	r4, r7, r5
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	0018      	movs	r0, r3
 8000e36:	f000 fb06 	bl	8001446 <ADC_ConversionStop>
 8000e3a:	0003      	movs	r3, r0
 8000e3c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000e3e:	197b      	adds	r3, r7, r5
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d112      	bne.n	8000e6c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000e46:	197c      	adds	r4, r7, r5
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 fa8a 	bl	8001364 <ADC_Disable>
 8000e50:	0003      	movs	r3, r0
 8000e52:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000e54:	197b      	adds	r3, r7, r5
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d107      	bne.n	8000e6c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e60:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <HAL_ADC_Stop+0x7c>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	2201      	movs	r2, #1
 8000e66:	431a      	orrs	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2234      	movs	r2, #52	; 0x34
 8000e70:	2100      	movs	r1, #0
 8000e72:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000e74:	230f      	movs	r3, #15
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	781b      	ldrb	r3, [r3, #0]
}
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b004      	add	sp, #16
 8000e80:	bdb0      	pop	{r4, r5, r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	fffffefe 	.word	0xfffffefe

08000e88 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000e96:	0018      	movs	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2204      	movs	r2, #4
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d106      	bne.n	8000ec4 <HAL_ADC_IRQHandler+0x24>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d00d      	beq.n	8000ee0 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2208      	movs	r2, #8
 8000ecc:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000ece:	2b08      	cmp	r3, #8
 8000ed0:	d14f      	bne.n	8000f72 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2208      	movs	r2, #8
 8000eda:	4013      	ands	r3, r2
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d148      	bne.n	8000f72 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee4:	2210      	movs	r2, #16
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d106      	bne.n	8000ef8 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eee:	2280      	movs	r2, #128	; 0x80
 8000ef0:	0092      	lsls	r2, r2, #2
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	68da      	ldr	r2, [r3, #12]
 8000efe:	23c0      	movs	r3, #192	; 0xc0
 8000f00:	011b      	lsls	r3, r3, #4
 8000f02:	4013      	ands	r3, r2
 8000f04:	d12d      	bne.n	8000f62 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d129      	bne.n	8000f62 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2208      	movs	r2, #8
 8000f16:	4013      	ands	r3, r2
 8000f18:	2b08      	cmp	r3, #8
 8000f1a:	d122      	bne.n	8000f62 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	2204      	movs	r2, #4
 8000f24:	4013      	ands	r3, r2
 8000f26:	d110      	bne.n	8000f4a <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	210c      	movs	r1, #12
 8000f34:	438a      	bics	r2, r1
 8000f36:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f3c:	4a33      	ldr	r2, [pc, #204]	; (800100c <HAL_ADC_IRQHandler+0x16c>)
 8000f3e:	4013      	ands	r3, r2
 8000f40:	2201      	movs	r2, #1
 8000f42:	431a      	orrs	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	639a      	str	r2, [r3, #56]	; 0x38
 8000f48:	e00b      	b.n	8000f62 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4e:	2220      	movs	r2, #32
 8000f50:	431a      	orrs	r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	0018      	movs	r0, r3
 8000f66:	f000 f853 	bl	8001010 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	2b80      	cmp	r3, #128	; 0x80
 8000f7e:	d115      	bne.n	8000fac <HAL_ADC_IRQHandler+0x10c>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	4013      	ands	r3, r2
 8000f8a:	2b80      	cmp	r3, #128	; 0x80
 8000f8c:	d10e      	bne.n	8000fac <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	0252      	lsls	r2, r2, #9
 8000f96:	431a      	orrs	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 f83e 	bl	8001020 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b10      	cmp	r3, #16
 8000fb8:	d123      	bne.n	8001002 <HAL_ADC_IRQHandler+0x162>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2210      	movs	r2, #16
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	2b10      	cmp	r3, #16
 8000fc6:	d11c      	bne.n	8001002 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d006      	beq.n	8000fde <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d10d      	bne.n	8000ffa <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2210      	movs	r2, #16
 8000ff0:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f000 f81b 	bl	8001030 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2210      	movs	r2, #16
 8001000:	601a      	str	r2, [r3, #0]
  }

}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	fffffefe 	.word	0xfffffefe

08001010 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b002      	add	sp, #8
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b002      	add	sp, #8
 800102e:	bd80      	pop	{r7, pc}

08001030 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	b002      	add	sp, #8
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800104a:	230f      	movs	r3, #15
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	055b      	lsls	r3, r3, #21
 800105e:	429a      	cmp	r2, r3
 8001060:	d011      	beq.n	8001086 <HAL_ADC_ConfigChannel+0x46>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001066:	2b01      	cmp	r3, #1
 8001068:	d00d      	beq.n	8001086 <HAL_ADC_ConfigChannel+0x46>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106e:	2b02      	cmp	r3, #2
 8001070:	d009      	beq.n	8001086 <HAL_ADC_ConfigChannel+0x46>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001076:	2b03      	cmp	r3, #3
 8001078:	d005      	beq.n	8001086 <HAL_ADC_ConfigChannel+0x46>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107e:	2b04      	cmp	r3, #4
 8001080:	d001      	beq.n	8001086 <HAL_ADC_ConfigChannel+0x46>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2234      	movs	r2, #52	; 0x34
 800108a:	5c9b      	ldrb	r3, [r3, r2]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d101      	bne.n	8001094 <HAL_ADC_ConfigChannel+0x54>
 8001090:	2302      	movs	r3, #2
 8001092:	e0d0      	b.n	8001236 <HAL_ADC_ConfigChannel+0x1f6>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2234      	movs	r2, #52	; 0x34
 8001098:	2101      	movs	r1, #1
 800109a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2204      	movs	r2, #4
 80010a4:	4013      	ands	r3, r2
 80010a6:	d000      	beq.n	80010aa <HAL_ADC_ConfigChannel+0x6a>
 80010a8:	e0b4      	b.n	8001214 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	4a64      	ldr	r2, [pc, #400]	; (8001240 <HAL_ADC_ConfigChannel+0x200>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d100      	bne.n	80010b6 <HAL_ADC_ConfigChannel+0x76>
 80010b4:	e082      	b.n	80011bc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2201      	movs	r2, #1
 80010c2:	409a      	lsls	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	430a      	orrs	r2, r1
 80010ca:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	055b      	lsls	r3, r3, #21
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d037      	beq.n	8001148 <HAL_ADC_ConfigChannel+0x108>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d033      	beq.n	8001148 <HAL_ADC_ConfigChannel+0x108>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d02f      	beq.n	8001148 <HAL_ADC_ConfigChannel+0x108>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d02b      	beq.n	8001148 <HAL_ADC_ConfigChannel+0x108>
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f4:	2b04      	cmp	r3, #4
 80010f6:	d027      	beq.n	8001148 <HAL_ADC_ConfigChannel+0x108>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	d023      	beq.n	8001148 <HAL_ADC_ConfigChannel+0x108>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001104:	2b06      	cmp	r3, #6
 8001106:	d01f      	beq.n	8001148 <HAL_ADC_ConfigChannel+0x108>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110c:	2b07      	cmp	r3, #7
 800110e:	d01b      	beq.n	8001148 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	2107      	movs	r1, #7
 800111c:	400b      	ands	r3, r1
 800111e:	429a      	cmp	r2, r3
 8001120:	d012      	beq.n	8001148 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	695a      	ldr	r2, [r3, #20]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2107      	movs	r1, #7
 800112e:	438a      	bics	r2, r1
 8001130:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	6959      	ldr	r1, [r3, #20]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	2207      	movs	r2, #7
 800113e:	401a      	ands	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b10      	cmp	r3, #16
 800114e:	d007      	beq.n	8001160 <HAL_ADC_ConfigChannel+0x120>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b11      	cmp	r3, #17
 8001156:	d003      	beq.n	8001160 <HAL_ADC_ConfigChannel+0x120>
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b12      	cmp	r3, #18
 800115e:	d163      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001160:	4b38      	ldr	r3, [pc, #224]	; (8001244 <HAL_ADC_ConfigChannel+0x204>)
 8001162:	6819      	ldr	r1, [r3, #0]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b10      	cmp	r3, #16
 800116a:	d009      	beq.n	8001180 <HAL_ADC_ConfigChannel+0x140>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b11      	cmp	r3, #17
 8001172:	d102      	bne.n	800117a <HAL_ADC_ConfigChannel+0x13a>
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	03db      	lsls	r3, r3, #15
 8001178:	e004      	b.n	8001184 <HAL_ADC_ConfigChannel+0x144>
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	045b      	lsls	r3, r3, #17
 800117e:	e001      	b.n	8001184 <HAL_ADC_ConfigChannel+0x144>
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	041b      	lsls	r3, r3, #16
 8001184:	4a2f      	ldr	r2, [pc, #188]	; (8001244 <HAL_ADC_ConfigChannel+0x204>)
 8001186:	430b      	orrs	r3, r1
 8001188:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b10      	cmp	r3, #16
 8001190:	d14a      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <HAL_ADC_ConfigChannel+0x208>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	492d      	ldr	r1, [pc, #180]	; (800124c <HAL_ADC_ConfigChannel+0x20c>)
 8001198:	0018      	movs	r0, r3
 800119a:	f7fe ffb5 	bl	8000108 <__udivsi3>
 800119e:	0003      	movs	r3, r0
 80011a0:	001a      	movs	r2, r3
 80011a2:	0013      	movs	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	189b      	adds	r3, r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011ac:	e002      	b.n	80011b4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f9      	bne.n	80011ae <HAL_ADC_ConfigChannel+0x16e>
 80011ba:	e035      	b.n	8001228 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2101      	movs	r1, #1
 80011c8:	4099      	lsls	r1, r3
 80011ca:	000b      	movs	r3, r1
 80011cc:	43d9      	mvns	r1, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	400a      	ands	r2, r1
 80011d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2b10      	cmp	r3, #16
 80011dc:	d007      	beq.n	80011ee <HAL_ADC_ConfigChannel+0x1ae>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b11      	cmp	r3, #17
 80011e4:	d003      	beq.n	80011ee <HAL_ADC_ConfigChannel+0x1ae>
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b12      	cmp	r3, #18
 80011ec:	d11c      	bne.n	8001228 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80011ee:	4b15      	ldr	r3, [pc, #84]	; (8001244 <HAL_ADC_ConfigChannel+0x204>)
 80011f0:	6819      	ldr	r1, [r3, #0]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	d007      	beq.n	800120a <HAL_ADC_ConfigChannel+0x1ca>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b11      	cmp	r3, #17
 8001200:	d101      	bne.n	8001206 <HAL_ADC_ConfigChannel+0x1c6>
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <HAL_ADC_ConfigChannel+0x210>)
 8001204:	e002      	b.n	800120c <HAL_ADC_ConfigChannel+0x1cc>
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_ADC_ConfigChannel+0x214>)
 8001208:	e000      	b.n	800120c <HAL_ADC_ConfigChannel+0x1cc>
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_ADC_ConfigChannel+0x218>)
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <HAL_ADC_ConfigChannel+0x204>)
 800120e:	400b      	ands	r3, r1
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e009      	b.n	8001228 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001218:	2220      	movs	r2, #32
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001220:	230f      	movs	r3, #15
 8001222:	18fb      	adds	r3, r7, r3
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2234      	movs	r2, #52	; 0x34
 800122c:	2100      	movs	r1, #0
 800122e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001230:	230f      	movs	r3, #15
 8001232:	18fb      	adds	r3, r7, r3
 8001234:	781b      	ldrb	r3, [r3, #0]
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b004      	add	sp, #16
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	00001001 	.word	0x00001001
 8001244:	40012708 	.word	0x40012708
 8001248:	20000004 	.word	0x20000004
 800124c:	000f4240 	.word	0x000f4240
 8001250:	ffbfffff 	.word	0xffbfffff
 8001254:	feffffff 	.word	0xfeffffff
 8001258:	ff7fffff 	.word	0xff7fffff

0800125c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2203      	movs	r2, #3
 8001274:	4013      	ands	r3, r2
 8001276:	2b01      	cmp	r3, #1
 8001278:	d112      	bne.n	80012a0 <ADC_Enable+0x44>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2201      	movs	r2, #1
 8001282:	4013      	ands	r3, r2
 8001284:	2b01      	cmp	r3, #1
 8001286:	d009      	beq.n	800129c <ADC_Enable+0x40>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68da      	ldr	r2, [r3, #12]
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	021b      	lsls	r3, r3, #8
 8001292:	401a      	ands	r2, r3
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	429a      	cmp	r2, r3
 800129a:	d101      	bne.n	80012a0 <ADC_Enable+0x44>
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <ADC_Enable+0x46>
 80012a0:	2300      	movs	r3, #0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d152      	bne.n	800134c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	4a2a      	ldr	r2, [pc, #168]	; (8001358 <ADC_Enable+0xfc>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	d00d      	beq.n	80012ce <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012b6:	2210      	movs	r2, #16
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c2:	2201      	movs	r2, #1
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e03f      	b.n	800134e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689a      	ldr	r2, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2101      	movs	r1, #1
 80012da:	430a      	orrs	r2, r1
 80012dc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <ADC_Enable+0x100>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	491f      	ldr	r1, [pc, #124]	; (8001360 <ADC_Enable+0x104>)
 80012e4:	0018      	movs	r0, r3
 80012e6:	f7fe ff0f 	bl	8000108 <__udivsi3>
 80012ea:	0003      	movs	r3, r0
 80012ec:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012ee:	e002      	b.n	80012f6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f9      	bne.n	80012f0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80012fc:	f7ff fbc2 	bl	8000a84 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001304:	e01b      	b.n	800133e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001306:	f7ff fbbd 	bl	8000a84 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d914      	bls.n	800133e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2201      	movs	r2, #1
 800131c:	4013      	ands	r3, r2
 800131e:	2b01      	cmp	r3, #1
 8001320:	d00d      	beq.n	800133e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001326:	2210      	movs	r2, #16
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001332:	2201      	movs	r2, #1
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e007      	b.n	800134e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2201      	movs	r2, #1
 8001346:	4013      	ands	r3, r2
 8001348:	2b01      	cmp	r3, #1
 800134a:	d1dc      	bne.n	8001306 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	0018      	movs	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	b004      	add	sp, #16
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	80000017 	.word	0x80000017
 800135c:	20000004 	.word	0x20000004
 8001360:	000f4240 	.word	0x000f4240

08001364 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2203      	movs	r2, #3
 8001378:	4013      	ands	r3, r2
 800137a:	2b01      	cmp	r3, #1
 800137c:	d112      	bne.n	80013a4 <ADC_Disable+0x40>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	4013      	ands	r3, r2
 8001388:	2b01      	cmp	r3, #1
 800138a:	d009      	beq.n	80013a0 <ADC_Disable+0x3c>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	401a      	ands	r2, r3
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	429a      	cmp	r2, r3
 800139e:	d101      	bne.n	80013a4 <ADC_Disable+0x40>
 80013a0:	2301      	movs	r3, #1
 80013a2:	e000      	b.n	80013a6 <ADC_Disable+0x42>
 80013a4:	2300      	movs	r3, #0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d048      	beq.n	800143c <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2205      	movs	r2, #5
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d110      	bne.n	80013da <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2102      	movs	r1, #2
 80013c4:	430a      	orrs	r2, r1
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2203      	movs	r2, #3
 80013ce:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013d0:	f7ff fb58 	bl	8000a84 <HAL_GetTick>
 80013d4:	0003      	movs	r3, r0
 80013d6:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80013d8:	e029      	b.n	800142e <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013de:	2210      	movs	r2, #16
 80013e0:	431a      	orrs	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ea:	2201      	movs	r2, #1
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e023      	b.n	800143e <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013f6:	f7ff fb45 	bl	8000a84 <HAL_GetTick>
 80013fa:	0002      	movs	r2, r0
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d914      	bls.n	800142e <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2201      	movs	r2, #1
 800140c:	4013      	ands	r3, r2
 800140e:	2b01      	cmp	r3, #1
 8001410:	d10d      	bne.n	800142e <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001416:	2210      	movs	r2, #16
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001422:	2201      	movs	r2, #1
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e007      	b.n	800143e <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2201      	movs	r2, #1
 8001436:	4013      	ands	r3, r2
 8001438:	2b01      	cmp	r3, #1
 800143a:	d0dc      	beq.n	80013f6 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	0018      	movs	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	b004      	add	sp, #16
 8001444:	bd80      	pop	{r7, pc}

08001446 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2204      	movs	r2, #4
 800145a:	4013      	ands	r3, r2
 800145c:	d03a      	beq.n	80014d4 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2204      	movs	r2, #4
 8001466:	4013      	ands	r3, r2
 8001468:	2b04      	cmp	r3, #4
 800146a:	d10d      	bne.n	8001488 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2202      	movs	r2, #2
 8001474:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001476:	d107      	bne.n	8001488 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2110      	movs	r1, #16
 8001484:	430a      	orrs	r2, r1
 8001486:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001488:	f7ff fafc 	bl	8000a84 <HAL_GetTick>
 800148c:	0003      	movs	r3, r0
 800148e:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001490:	e01a      	b.n	80014c8 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001492:	f7ff faf7 	bl	8000a84 <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d913      	bls.n	80014c8 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2204      	movs	r2, #4
 80014a8:	4013      	ands	r3, r2
 80014aa:	d00d      	beq.n	80014c8 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b0:	2210      	movs	r2, #16
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014bc:	2201      	movs	r2, #1
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e006      	b.n	80014d6 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2204      	movs	r2, #4
 80014d0:	4013      	ands	r3, r2
 80014d2:	d1de      	bne.n	8001492 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	0018      	movs	r0, r3
 80014d8:	46bd      	mov	sp, r7
 80014da:	b004      	add	sp, #16
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	0002      	movs	r2, r0
 80014e8:	1dfb      	adds	r3, r7, #7
 80014ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014ec:	1dfb      	adds	r3, r7, #7
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b7f      	cmp	r3, #127	; 0x7f
 80014f2:	d809      	bhi.n	8001508 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f4:	1dfb      	adds	r3, r7, #7
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	001a      	movs	r2, r3
 80014fa:	231f      	movs	r3, #31
 80014fc:	401a      	ands	r2, r3
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_EnableIRQ+0x30>)
 8001500:	2101      	movs	r1, #1
 8001502:	4091      	lsls	r1, r2
 8001504:	000a      	movs	r2, r1
 8001506:	601a      	str	r2, [r3, #0]
  }
}
 8001508:	46c0      	nop			; (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	b002      	add	sp, #8
 800150e:	bd80      	pop	{r7, pc}
 8001510:	e000e100 	.word	0xe000e100

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	0002      	movs	r2, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	1dfb      	adds	r3, r7, #7
 8001520:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b7f      	cmp	r3, #127	; 0x7f
 8001528:	d828      	bhi.n	800157c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800152a:	4a2f      	ldr	r2, [pc, #188]	; (80015e8 <__NVIC_SetPriority+0xd4>)
 800152c:	1dfb      	adds	r3, r7, #7
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b25b      	sxtb	r3, r3
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	33c0      	adds	r3, #192	; 0xc0
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	589b      	ldr	r3, [r3, r2]
 800153a:	1dfa      	adds	r2, r7, #7
 800153c:	7812      	ldrb	r2, [r2, #0]
 800153e:	0011      	movs	r1, r2
 8001540:	2203      	movs	r2, #3
 8001542:	400a      	ands	r2, r1
 8001544:	00d2      	lsls	r2, r2, #3
 8001546:	21ff      	movs	r1, #255	; 0xff
 8001548:	4091      	lsls	r1, r2
 800154a:	000a      	movs	r2, r1
 800154c:	43d2      	mvns	r2, r2
 800154e:	401a      	ands	r2, r3
 8001550:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	019b      	lsls	r3, r3, #6
 8001556:	22ff      	movs	r2, #255	; 0xff
 8001558:	401a      	ands	r2, r3
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	0018      	movs	r0, r3
 8001560:	2303      	movs	r3, #3
 8001562:	4003      	ands	r3, r0
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001568:	481f      	ldr	r0, [pc, #124]	; (80015e8 <__NVIC_SetPriority+0xd4>)
 800156a:	1dfb      	adds	r3, r7, #7
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b25b      	sxtb	r3, r3
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	430a      	orrs	r2, r1
 8001574:	33c0      	adds	r3, #192	; 0xc0
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800157a:	e031      	b.n	80015e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800157c:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <__NVIC_SetPriority+0xd8>)
 800157e:	1dfb      	adds	r3, r7, #7
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	0019      	movs	r1, r3
 8001584:	230f      	movs	r3, #15
 8001586:	400b      	ands	r3, r1
 8001588:	3b08      	subs	r3, #8
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3306      	adds	r3, #6
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	18d3      	adds	r3, r2, r3
 8001592:	3304      	adds	r3, #4
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	1dfa      	adds	r2, r7, #7
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	0011      	movs	r1, r2
 800159c:	2203      	movs	r2, #3
 800159e:	400a      	ands	r2, r1
 80015a0:	00d2      	lsls	r2, r2, #3
 80015a2:	21ff      	movs	r1, #255	; 0xff
 80015a4:	4091      	lsls	r1, r2
 80015a6:	000a      	movs	r2, r1
 80015a8:	43d2      	mvns	r2, r2
 80015aa:	401a      	ands	r2, r3
 80015ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	019b      	lsls	r3, r3, #6
 80015b2:	22ff      	movs	r2, #255	; 0xff
 80015b4:	401a      	ands	r2, r3
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	0018      	movs	r0, r3
 80015bc:	2303      	movs	r3, #3
 80015be:	4003      	ands	r3, r0
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <__NVIC_SetPriority+0xd8>)
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	001c      	movs	r4, r3
 80015cc:	230f      	movs	r3, #15
 80015ce:	4023      	ands	r3, r4
 80015d0:	3b08      	subs	r3, #8
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	430a      	orrs	r2, r1
 80015d6:	3306      	adds	r3, #6
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	18c3      	adds	r3, r0, r3
 80015dc:	3304      	adds	r3, #4
 80015de:	601a      	str	r2, [r3, #0]
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b003      	add	sp, #12
 80015e6:	bd90      	pop	{r4, r7, pc}
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	1e5a      	subs	r2, r3, #1
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	045b      	lsls	r3, r3, #17
 8001600:	429a      	cmp	r2, r3
 8001602:	d301      	bcc.n	8001608 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001604:	2301      	movs	r3, #1
 8001606:	e010      	b.n	800162a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <SysTick_Config+0x44>)
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	3a01      	subs	r2, #1
 800160e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001610:	2301      	movs	r3, #1
 8001612:	425b      	negs	r3, r3
 8001614:	2103      	movs	r1, #3
 8001616:	0018      	movs	r0, r3
 8001618:	f7ff ff7c 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <SysTick_Config+0x44>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <SysTick_Config+0x44>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001628:	2300      	movs	r3, #0
}
 800162a:	0018      	movs	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	b002      	add	sp, #8
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	e000e010 	.word	0xe000e010

08001638 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	210f      	movs	r1, #15
 8001644:	187b      	adds	r3, r7, r1
 8001646:	1c02      	adds	r2, r0, #0
 8001648:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	187b      	adds	r3, r7, r1
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b25b      	sxtb	r3, r3
 8001652:	0011      	movs	r1, r2
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff ff5d 	bl	8001514 <__NVIC_SetPriority>
}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46bd      	mov	sp, r7
 800165e:	b004      	add	sp, #16
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	0002      	movs	r2, r0
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b25b      	sxtb	r3, r3
 8001674:	0018      	movs	r0, r3
 8001676:	f7ff ff33 	bl	80014e0 <__NVIC_EnableIRQ>
}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	46bd      	mov	sp, r7
 800167e:	b002      	add	sp, #8
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff ffaf 	bl	80015f0 <SysTick_Config>
 8001692:	0003      	movs	r3, r0
}
 8001694:	0018      	movs	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	b002      	add	sp, #8
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e036      	b.n	8001720 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2221      	movs	r2, #33	; 0x21
 80016b6:	2102      	movs	r1, #2
 80016b8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4a18      	ldr	r2, [pc, #96]	; (8001728 <HAL_DMA_Init+0x8c>)
 80016c6:	4013      	ands	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80016d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69db      	ldr	r3, [r3, #28]
 80016f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	0018      	movs	r0, r3
 8001704:	f000 f932 	bl	800196c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2221      	movs	r2, #33	; 0x21
 8001712:	2101      	movs	r1, #1
 8001714:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2220      	movs	r2, #32
 800171a:	2100      	movs	r1, #0
 800171c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}  
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b004      	add	sp, #16
 8001726:	bd80      	pop	{r7, pc}
 8001728:	ffffc00f 	.word	0xffffc00f

0800172c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2221      	movs	r2, #33	; 0x21
 8001738:	5c9b      	ldrb	r3, [r3, r2]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d008      	beq.n	8001752 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2204      	movs	r2, #4
 8001744:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2220      	movs	r2, #32
 800174a:	2100      	movs	r1, #0
 800174c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e020      	b.n	8001794 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	210e      	movs	r1, #14
 800175e:	438a      	bics	r2, r1
 8001760:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2101      	movs	r1, #1
 800176e:	438a      	bics	r2, r1
 8001770:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177a:	2101      	movs	r1, #1
 800177c:	4091      	lsls	r1, r2
 800177e:	000a      	movs	r2, r1
 8001780:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2221      	movs	r2, #33	; 0x21
 8001786:	2101      	movs	r1, #1
 8001788:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2220      	movs	r2, #32
 800178e:	2100      	movs	r1, #0
 8001790:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	0018      	movs	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	b002      	add	sp, #8
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a4:	210f      	movs	r1, #15
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2221      	movs	r2, #33	; 0x21
 80017b0:	5c9b      	ldrb	r3, [r3, r2]
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d006      	beq.n	80017c6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2204      	movs	r2, #4
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80017be:	187b      	adds	r3, r7, r1
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
 80017c4:	e028      	b.n	8001818 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	210e      	movs	r1, #14
 80017d2:	438a      	bics	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2101      	movs	r1, #1
 80017e2:	438a      	bics	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ee:	2101      	movs	r1, #1
 80017f0:	4091      	lsls	r1, r2
 80017f2:	000a      	movs	r2, r1
 80017f4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2221      	movs	r2, #33	; 0x21
 80017fa:	2101      	movs	r1, #1
 80017fc:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2220      	movs	r2, #32
 8001802:	2100      	movs	r1, #0
 8001804:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180a:	2b00      	cmp	r3, #0
 800180c:	d004      	beq.n	8001818 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	0010      	movs	r0, r2
 8001816:	4798      	blx	r3
    } 
  }
  return status;
 8001818:	230f      	movs	r3, #15
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	781b      	ldrb	r3, [r3, #0]
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b004      	add	sp, #16
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	2204      	movs	r2, #4
 8001844:	409a      	lsls	r2, r3
 8001846:	0013      	movs	r3, r2
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4013      	ands	r3, r2
 800184c:	d024      	beq.n	8001898 <HAL_DMA_IRQHandler+0x72>
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	2204      	movs	r2, #4
 8001852:	4013      	ands	r3, r2
 8001854:	d020      	beq.n	8001898 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2220      	movs	r2, #32
 800185e:	4013      	ands	r3, r2
 8001860:	d107      	bne.n	8001872 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2104      	movs	r1, #4
 800186e:	438a      	bics	r2, r1
 8001870:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187a:	2104      	movs	r1, #4
 800187c:	4091      	lsls	r1, r2
 800187e:	000a      	movs	r2, r1
 8001880:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	2b00      	cmp	r3, #0
 8001888:	d100      	bne.n	800188c <HAL_DMA_IRQHandler+0x66>
 800188a:	e06a      	b.n	8001962 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	0010      	movs	r0, r2
 8001894:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001896:	e064      	b.n	8001962 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	2202      	movs	r2, #2
 800189e:	409a      	lsls	r2, r3
 80018a0:	0013      	movs	r3, r2
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4013      	ands	r3, r2
 80018a6:	d02b      	beq.n	8001900 <HAL_DMA_IRQHandler+0xda>
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2202      	movs	r2, #2
 80018ac:	4013      	ands	r3, r2
 80018ae:	d027      	beq.n	8001900 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2220      	movs	r2, #32
 80018b8:	4013      	ands	r3, r2
 80018ba:	d10b      	bne.n	80018d4 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	210a      	movs	r1, #10
 80018c8:	438a      	bics	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2221      	movs	r2, #33	; 0x21
 80018d0:	2101      	movs	r1, #1
 80018d2:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018dc:	2102      	movs	r1, #2
 80018de:	4091      	lsls	r1, r2
 80018e0:	000a      	movs	r2, r1
 80018e2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2220      	movs	r2, #32
 80018e8:	2100      	movs	r1, #0
 80018ea:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d036      	beq.n	8001962 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	0010      	movs	r0, r2
 80018fc:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80018fe:	e030      	b.n	8001962 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	2208      	movs	r2, #8
 8001906:	409a      	lsls	r2, r3
 8001908:	0013      	movs	r3, r2
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	4013      	ands	r3, r2
 800190e:	d028      	beq.n	8001962 <HAL_DMA_IRQHandler+0x13c>
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2208      	movs	r2, #8
 8001914:	4013      	ands	r3, r2
 8001916:	d024      	beq.n	8001962 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	210e      	movs	r1, #14
 8001924:	438a      	bics	r2, r1
 8001926:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001930:	2101      	movs	r1, #1
 8001932:	4091      	lsls	r1, r2
 8001934:	000a      	movs	r2, r1
 8001936:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2221      	movs	r2, #33	; 0x21
 8001942:	2101      	movs	r1, #1
 8001944:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2220      	movs	r2, #32
 800194a:	2100      	movs	r1, #0
 800194c:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	0010      	movs	r0, r2
 800195e:	4798      	blx	r3
    }
   }
}  
 8001960:	e7ff      	b.n	8001962 <HAL_DMA_IRQHandler+0x13c>
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	46bd      	mov	sp, r7
 8001966:	b004      	add	sp, #16
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a08      	ldr	r2, [pc, #32]	; (800199c <DMA_CalcBaseAndBitshift+0x30>)
 800197a:	4694      	mov	ip, r2
 800197c:	4463      	add	r3, ip
 800197e:	2114      	movs	r1, #20
 8001980:	0018      	movs	r0, r3
 8001982:	f7fe fbc1 	bl	8000108 <__udivsi3>
 8001986:	0003      	movs	r3, r0
 8001988:	009a      	lsls	r2, r3, #2
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a03      	ldr	r2, [pc, #12]	; (80019a0 <DMA_CalcBaseAndBitshift+0x34>)
 8001992:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b002      	add	sp, #8
 800199a:	bd80      	pop	{r7, pc}
 800199c:	bffdfff8 	.word	0xbffdfff8
 80019a0:	40020000 	.word	0x40020000

080019a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b2:	e14f      	b.n	8001c54 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2101      	movs	r1, #1
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4091      	lsls	r1, r2
 80019be:	000a      	movs	r2, r1
 80019c0:	4013      	ands	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d100      	bne.n	80019cc <HAL_GPIO_Init+0x28>
 80019ca:	e140      	b.n	8001c4e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2203      	movs	r2, #3
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d005      	beq.n	80019e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2203      	movs	r2, #3
 80019de:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d130      	bne.n	8001a46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	2203      	movs	r2, #3
 80019f0:	409a      	lsls	r2, r3
 80019f2:	0013      	movs	r3, r2
 80019f4:	43da      	mvns	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	409a      	lsls	r2, r3
 8001a06:	0013      	movs	r3, r2
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
 8001a20:	0013      	movs	r3, r2
 8001a22:	43da      	mvns	r2, r3
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	091b      	lsrs	r3, r3, #4
 8001a30:	2201      	movs	r2, #1
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
 8001a38:	0013      	movs	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d017      	beq.n	8001a82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	0013      	movs	r3, r2
 8001a62:	43da      	mvns	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	409a      	lsls	r2, r3
 8001a74:	0013      	movs	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2203      	movs	r2, #3
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d123      	bne.n	8001ad6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	08da      	lsrs	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3208      	adds	r2, #8
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	58d3      	ldr	r3, [r2, r3]
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2207      	movs	r2, #7
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	691a      	ldr	r2, [r3, #16]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2107      	movs	r1, #7
 8001aba:	400b      	ands	r3, r1
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	0013      	movs	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	0092      	lsls	r2, r2, #2
 8001ad2:	6939      	ldr	r1, [r7, #16]
 8001ad4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	0013      	movs	r3, r2
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2203      	movs	r2, #3
 8001af4:	401a      	ands	r2, r3
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	409a      	lsls	r2, r3
 8001afc:	0013      	movs	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	23c0      	movs	r3, #192	; 0xc0
 8001b10:	029b      	lsls	r3, r3, #10
 8001b12:	4013      	ands	r3, r2
 8001b14:	d100      	bne.n	8001b18 <HAL_GPIO_Init+0x174>
 8001b16:	e09a      	b.n	8001c4e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b18:	4b54      	ldr	r3, [pc, #336]	; (8001c6c <HAL_GPIO_Init+0x2c8>)
 8001b1a:	699a      	ldr	r2, [r3, #24]
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_GPIO_Init+0x2c8>)
 8001b1e:	2101      	movs	r1, #1
 8001b20:	430a      	orrs	r2, r1
 8001b22:	619a      	str	r2, [r3, #24]
 8001b24:	4b51      	ldr	r3, [pc, #324]	; (8001c6c <HAL_GPIO_Init+0x2c8>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b30:	4a4f      	ldr	r2, [pc, #316]	; (8001c70 <HAL_GPIO_Init+0x2cc>)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	089b      	lsrs	r3, r3, #2
 8001b36:	3302      	adds	r3, #2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	589b      	ldr	r3, [r3, r2]
 8001b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2203      	movs	r2, #3
 8001b42:	4013      	ands	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	220f      	movs	r2, #15
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	0013      	movs	r3, r2
 8001b4c:	43da      	mvns	r2, r3
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4013      	ands	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	2390      	movs	r3, #144	; 0x90
 8001b58:	05db      	lsls	r3, r3, #23
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d013      	beq.n	8001b86 <HAL_GPIO_Init+0x1e2>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a44      	ldr	r2, [pc, #272]	; (8001c74 <HAL_GPIO_Init+0x2d0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d00d      	beq.n	8001b82 <HAL_GPIO_Init+0x1de>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a43      	ldr	r2, [pc, #268]	; (8001c78 <HAL_GPIO_Init+0x2d4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d007      	beq.n	8001b7e <HAL_GPIO_Init+0x1da>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a42      	ldr	r2, [pc, #264]	; (8001c7c <HAL_GPIO_Init+0x2d8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d101      	bne.n	8001b7a <HAL_GPIO_Init+0x1d6>
 8001b76:	2303      	movs	r3, #3
 8001b78:	e006      	b.n	8001b88 <HAL_GPIO_Init+0x1e4>
 8001b7a:	2305      	movs	r3, #5
 8001b7c:	e004      	b.n	8001b88 <HAL_GPIO_Init+0x1e4>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e002      	b.n	8001b88 <HAL_GPIO_Init+0x1e4>
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_GPIO_Init+0x1e4>
 8001b86:	2300      	movs	r3, #0
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	2103      	movs	r1, #3
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	0092      	lsls	r2, r2, #2
 8001b90:	4093      	lsls	r3, r2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b98:	4935      	ldr	r1, [pc, #212]	; (8001c70 <HAL_GPIO_Init+0x2cc>)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	089b      	lsrs	r3, r3, #2
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba6:	4b36      	ldr	r3, [pc, #216]	; (8001c80 <HAL_GPIO_Init+0x2dc>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	025b      	lsls	r3, r3, #9
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_GPIO_Init+0x2dc>)
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_GPIO_Init+0x2dc>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	029b      	lsls	r3, r3, #10
 8001be8:	4013      	ands	r3, r2
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bf4:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <HAL_GPIO_Init+0x2dc>)
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <HAL_GPIO_Init+0x2dc>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	43da      	mvns	r2, r3
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	035b      	lsls	r3, r3, #13
 8001c12:	4013      	ands	r3, r2
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_GPIO_Init+0x2dc>)
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <HAL_GPIO_Init+0x2dc>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	43da      	mvns	r2, r3
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	2380      	movs	r3, #128	; 0x80
 8001c3a:	039b      	lsls	r3, r3, #14
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c48:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_GPIO_Init+0x2dc>)
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	40da      	lsrs	r2, r3
 8001c5c:	1e13      	subs	r3, r2, #0
 8001c5e:	d000      	beq.n	8001c62 <HAL_GPIO_Init+0x2be>
 8001c60:	e6a8      	b.n	80019b4 <HAL_GPIO_Init+0x10>
  } 
}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b006      	add	sp, #24
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010000 	.word	0x40010000
 8001c74:	48000400 	.word	0x48000400
 8001c78:	48000800 	.word	0x48000800
 8001c7c:	48000c00 	.word	0x48000c00
 8001c80:	40010400 	.word	0x40010400

08001c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	0008      	movs	r0, r1
 8001c8e:	0011      	movs	r1, r2
 8001c90:	1cbb      	adds	r3, r7, #2
 8001c92:	1c02      	adds	r2, r0, #0
 8001c94:	801a      	strh	r2, [r3, #0]
 8001c96:	1c7b      	adds	r3, r7, #1
 8001c98:	1c0a      	adds	r2, r1, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c9c:	1c7b      	adds	r3, r7, #1
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d004      	beq.n	8001cae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ca4:	1cbb      	adds	r3, r7, #2
 8001ca6:	881a      	ldrh	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cac:	e003      	b.n	8001cb6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cae:	1cbb      	adds	r3, r7, #2
 8001cb0:	881a      	ldrh	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b002      	add	sp, #8
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	0002      	movs	r2, r0
 8001cc8:	1dbb      	adds	r3, r7, #6
 8001cca:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ccc:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	1dba      	adds	r2, r7, #6
 8001cd2:	8812      	ldrh	r2, [r2, #0]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d008      	beq.n	8001cea <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001cda:	1dba      	adds	r2, r7, #6
 8001cdc:	8812      	ldrh	r2, [r2, #0]
 8001cde:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ce0:	1dbb      	adds	r3, r7, #6
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f000 f807 	bl	8001cf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b002      	add	sp, #8
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	0002      	movs	r2, r0
 8001d00:	1dbb      	adds	r3, r7, #6
 8001d02:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b002      	add	sp, #8
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e042      	b.n	8001da4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	223d      	movs	r2, #61	; 0x3d
 8001d22:	5c9b      	ldrb	r3, [r3, r2]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d107      	bne.n	8001d3a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	223c      	movs	r2, #60	; 0x3c
 8001d2e:	2100      	movs	r1, #0
 8001d30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	0018      	movs	r0, r3
 8001d36:	f7fe fd75 	bl	8000824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	223d      	movs	r2, #61	; 0x3d
 8001d3e:	2102      	movs	r1, #2
 8001d40:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3304      	adds	r3, #4
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	0010      	movs	r0, r2
 8001d4e:	f000 fad7 	bl	8002300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2246      	movs	r2, #70	; 0x46
 8001d56:	2101      	movs	r1, #1
 8001d58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	223e      	movs	r2, #62	; 0x3e
 8001d5e:	2101      	movs	r1, #1
 8001d60:	5499      	strb	r1, [r3, r2]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	223f      	movs	r2, #63	; 0x3f
 8001d66:	2101      	movs	r1, #1
 8001d68:	5499      	strb	r1, [r3, r2]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2240      	movs	r2, #64	; 0x40
 8001d6e:	2101      	movs	r1, #1
 8001d70:	5499      	strb	r1, [r3, r2]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2241      	movs	r2, #65	; 0x41
 8001d76:	2101      	movs	r1, #1
 8001d78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2242      	movs	r2, #66	; 0x42
 8001d7e:	2101      	movs	r1, #1
 8001d80:	5499      	strb	r1, [r3, r2]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2243      	movs	r2, #67	; 0x43
 8001d86:	2101      	movs	r1, #1
 8001d88:	5499      	strb	r1, [r3, r2]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2244      	movs	r2, #68	; 0x44
 8001d8e:	2101      	movs	r1, #1
 8001d90:	5499      	strb	r1, [r3, r2]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2245      	movs	r2, #69	; 0x45
 8001d96:	2101      	movs	r1, #1
 8001d98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	223d      	movs	r2, #61	; 0x3d
 8001d9e:	2101      	movs	r1, #1
 8001da0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	0018      	movs	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b002      	add	sp, #8
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e042      	b.n	8001e44 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	223d      	movs	r2, #61	; 0x3d
 8001dc2:	5c9b      	ldrb	r3, [r3, r2]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d107      	bne.n	8001dda <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	223c      	movs	r2, #60	; 0x3c
 8001dce:	2100      	movs	r1, #0
 8001dd0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f000 f839 	bl	8001e4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	223d      	movs	r2, #61	; 0x3d
 8001dde:	2102      	movs	r1, #2
 8001de0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3304      	adds	r3, #4
 8001dea:	0019      	movs	r1, r3
 8001dec:	0010      	movs	r0, r2
 8001dee:	f000 fa87 	bl	8002300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2246      	movs	r2, #70	; 0x46
 8001df6:	2101      	movs	r1, #1
 8001df8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	223e      	movs	r2, #62	; 0x3e
 8001dfe:	2101      	movs	r1, #1
 8001e00:	5499      	strb	r1, [r3, r2]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	223f      	movs	r2, #63	; 0x3f
 8001e06:	2101      	movs	r1, #1
 8001e08:	5499      	strb	r1, [r3, r2]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2240      	movs	r2, #64	; 0x40
 8001e0e:	2101      	movs	r1, #1
 8001e10:	5499      	strb	r1, [r3, r2]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2241      	movs	r2, #65	; 0x41
 8001e16:	2101      	movs	r1, #1
 8001e18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2242      	movs	r2, #66	; 0x42
 8001e1e:	2101      	movs	r1, #1
 8001e20:	5499      	strb	r1, [r3, r2]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2243      	movs	r2, #67	; 0x43
 8001e26:	2101      	movs	r1, #1
 8001e28:	5499      	strb	r1, [r3, r2]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2244      	movs	r2, #68	; 0x44
 8001e2e:	2101      	movs	r1, #1
 8001e30:	5499      	strb	r1, [r3, r2]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2245      	movs	r2, #69	; 0x45
 8001e36:	2101      	movs	r1, #1
 8001e38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	223d      	movs	r2, #61	; 0x3d
 8001e3e:	2101      	movs	r1, #1
 8001e40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	0018      	movs	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e54:	46c0      	nop			; (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b002      	add	sp, #8
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d108      	bne.n	8001e7e <HAL_TIM_PWM_Start+0x22>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	223e      	movs	r2, #62	; 0x3e
 8001e70:	5c9b      	ldrb	r3, [r3, r2]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	1e5a      	subs	r2, r3, #1
 8001e78:	4193      	sbcs	r3, r2
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	e01f      	b.n	8001ebe <HAL_TIM_PWM_Start+0x62>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d108      	bne.n	8001e96 <HAL_TIM_PWM_Start+0x3a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	223f      	movs	r2, #63	; 0x3f
 8001e88:	5c9b      	ldrb	r3, [r3, r2]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	1e5a      	subs	r2, r3, #1
 8001e90:	4193      	sbcs	r3, r2
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	e013      	b.n	8001ebe <HAL_TIM_PWM_Start+0x62>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d108      	bne.n	8001eae <HAL_TIM_PWM_Start+0x52>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2240      	movs	r2, #64	; 0x40
 8001ea0:	5c9b      	ldrb	r3, [r3, r2]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	1e5a      	subs	r2, r3, #1
 8001ea8:	4193      	sbcs	r3, r2
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	e007      	b.n	8001ebe <HAL_TIM_PWM_Start+0x62>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2241      	movs	r2, #65	; 0x41
 8001eb2:	5c9b      	ldrb	r3, [r3, r2]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	4193      	sbcs	r3, r2
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e074      	b.n	8001fb0 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d104      	bne.n	8001ed6 <HAL_TIM_PWM_Start+0x7a>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	223e      	movs	r2, #62	; 0x3e
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	5499      	strb	r1, [r3, r2]
 8001ed4:	e013      	b.n	8001efe <HAL_TIM_PWM_Start+0xa2>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d104      	bne.n	8001ee6 <HAL_TIM_PWM_Start+0x8a>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	223f      	movs	r2, #63	; 0x3f
 8001ee0:	2102      	movs	r1, #2
 8001ee2:	5499      	strb	r1, [r3, r2]
 8001ee4:	e00b      	b.n	8001efe <HAL_TIM_PWM_Start+0xa2>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d104      	bne.n	8001ef6 <HAL_TIM_PWM_Start+0x9a>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2240      	movs	r2, #64	; 0x40
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	5499      	strb	r1, [r3, r2]
 8001ef4:	e003      	b.n	8001efe <HAL_TIM_PWM_Start+0xa2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2241      	movs	r2, #65	; 0x41
 8001efa:	2102      	movs	r1, #2
 8001efc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6839      	ldr	r1, [r7, #0]
 8001f04:	2201      	movs	r2, #1
 8001f06:	0018      	movs	r0, r3
 8001f08:	f000 fd10 	bl	800292c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <HAL_TIM_PWM_Start+0x15c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00e      	beq.n	8001f34 <HAL_TIM_PWM_Start+0xd8>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a28      	ldr	r2, [pc, #160]	; (8001fbc <HAL_TIM_PWM_Start+0x160>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d009      	beq.n	8001f34 <HAL_TIM_PWM_Start+0xd8>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <HAL_TIM_PWM_Start+0x164>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d004      	beq.n	8001f34 <HAL_TIM_PWM_Start+0xd8>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a25      	ldr	r2, [pc, #148]	; (8001fc4 <HAL_TIM_PWM_Start+0x168>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d101      	bne.n	8001f38 <HAL_TIM_PWM_Start+0xdc>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <HAL_TIM_PWM_Start+0xde>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d008      	beq.n	8001f50 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	0209      	lsls	r1, r1, #8
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a18      	ldr	r2, [pc, #96]	; (8001fb8 <HAL_TIM_PWM_Start+0x15c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00f      	beq.n	8001f7a <HAL_TIM_PWM_Start+0x11e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	05db      	lsls	r3, r3, #23
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d009      	beq.n	8001f7a <HAL_TIM_PWM_Start+0x11e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_TIM_PWM_Start+0x16c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d004      	beq.n	8001f7a <HAL_TIM_PWM_Start+0x11e>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a11      	ldr	r2, [pc, #68]	; (8001fbc <HAL_TIM_PWM_Start+0x160>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d111      	bne.n	8001f9e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2207      	movs	r2, #7
 8001f82:	4013      	ands	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2b06      	cmp	r3, #6
 8001f8a:	d010      	beq.n	8001fae <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2101      	movs	r1, #1
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f9c:	e007      	b.n	8001fae <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2101      	movs	r1, #1
 8001faa:	430a      	orrs	r2, r1
 8001fac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b004      	add	sp, #16
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40012c00 	.word	0x40012c00
 8001fbc:	40014000 	.word	0x40014000
 8001fc0:	40014400 	.word	0x40014400
 8001fc4:	40014800 	.word	0x40014800
 8001fc8:	40000400 	.word	0x40000400

08001fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd8:	2317      	movs	r3, #23
 8001fda:	18fb      	adds	r3, r7, r3
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	223c      	movs	r2, #60	; 0x3c
 8001fe4:	5c9b      	ldrb	r3, [r3, r2]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_TIM_PWM_ConfigChannel+0x22>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e0ad      	b.n	800214a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	223c      	movs	r2, #60	; 0x3c
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	d100      	bne.n	8001ffe <HAL_TIM_PWM_ConfigChannel+0x32>
 8001ffc:	e076      	b.n	80020ec <HAL_TIM_PWM_ConfigChannel+0x120>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b0c      	cmp	r3, #12
 8002002:	d900      	bls.n	8002006 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002004:	e095      	b.n	8002132 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b08      	cmp	r3, #8
 800200a:	d04e      	beq.n	80020aa <HAL_TIM_PWM_ConfigChannel+0xde>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b08      	cmp	r3, #8
 8002010:	d900      	bls.n	8002014 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002012:	e08e      	b.n	8002132 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_PWM_ConfigChannel+0x56>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b04      	cmp	r3, #4
 800201e:	d021      	beq.n	8002064 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002020:	e087      	b.n	8002132 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	0011      	movs	r1, r2
 800202a:	0018      	movs	r0, r3
 800202c:	f000 f9e8 	bl	8002400 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	699a      	ldr	r2, [r3, #24]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2108      	movs	r1, #8
 800203c:	430a      	orrs	r2, r1
 800203e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2104      	movs	r1, #4
 800204c:	438a      	bics	r2, r1
 800204e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6999      	ldr	r1, [r3, #24]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	619a      	str	r2, [r3, #24]
      break;
 8002062:	e06b      	b.n	800213c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	0011      	movs	r1, r2
 800206c:	0018      	movs	r0, r3
 800206e:	f000 fa4f 	bl	8002510 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699a      	ldr	r2, [r3, #24]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	0109      	lsls	r1, r1, #4
 8002080:	430a      	orrs	r2, r1
 8002082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699a      	ldr	r2, [r3, #24]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4931      	ldr	r1, [pc, #196]	; (8002154 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002090:	400a      	ands	r2, r1
 8002092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6999      	ldr	r1, [r3, #24]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	021a      	lsls	r2, r3, #8
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	619a      	str	r2, [r3, #24]
      break;
 80020a8:	e048      	b.n	800213c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	0011      	movs	r1, r2
 80020b2:	0018      	movs	r0, r3
 80020b4:	f000 fab0 	bl	8002618 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	69da      	ldr	r2, [r3, #28]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2108      	movs	r1, #8
 80020c4:	430a      	orrs	r2, r1
 80020c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69da      	ldr	r2, [r3, #28]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2104      	movs	r1, #4
 80020d4:	438a      	bics	r2, r1
 80020d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	69d9      	ldr	r1, [r3, #28]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	61da      	str	r2, [r3, #28]
      break;
 80020ea:	e027      	b.n	800213c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	0011      	movs	r1, r2
 80020f4:	0018      	movs	r0, r3
 80020f6:	f000 fb15 	bl	8002724 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69da      	ldr	r2, [r3, #28]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	0109      	lsls	r1, r1, #4
 8002108:	430a      	orrs	r2, r1
 800210a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	69da      	ldr	r2, [r3, #28]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	490f      	ldr	r1, [pc, #60]	; (8002154 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002118:	400a      	ands	r2, r1
 800211a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	69d9      	ldr	r1, [r3, #28]
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	021a      	lsls	r2, r3, #8
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	61da      	str	r2, [r3, #28]
      break;
 8002130:	e004      	b.n	800213c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002132:	2317      	movs	r3, #23
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
      break;
 800213a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	223c      	movs	r2, #60	; 0x3c
 8002140:	2100      	movs	r1, #0
 8002142:	5499      	strb	r1, [r3, r2]

  return status;
 8002144:	2317      	movs	r3, #23
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	781b      	ldrb	r3, [r3, #0]
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b006      	add	sp, #24
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	fffffbff 	.word	0xfffffbff

08002158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002162:	230f      	movs	r3, #15
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	223c      	movs	r2, #60	; 0x3c
 800216e:	5c9b      	ldrb	r3, [r3, r2]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_TIM_ConfigClockSource+0x20>
 8002174:	2302      	movs	r3, #2
 8002176:	e0bc      	b.n	80022f2 <HAL_TIM_ConfigClockSource+0x19a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	223c      	movs	r2, #60	; 0x3c
 800217c:	2101      	movs	r1, #1
 800217e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	223d      	movs	r2, #61	; 0x3d
 8002184:	2102      	movs	r1, #2
 8002186:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2277      	movs	r2, #119	; 0x77
 8002194:	4393      	bics	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	4a58      	ldr	r2, [pc, #352]	; (80022fc <HAL_TIM_ConfigClockSource+0x1a4>)
 800219c:	4013      	ands	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2280      	movs	r2, #128	; 0x80
 80021ae:	0192      	lsls	r2, r2, #6
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d040      	beq.n	8002236 <HAL_TIM_ConfigClockSource+0xde>
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	0192      	lsls	r2, r2, #6
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d900      	bls.n	80021be <HAL_TIM_ConfigClockSource+0x66>
 80021bc:	e088      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x178>
 80021be:	2280      	movs	r2, #128	; 0x80
 80021c0:	0152      	lsls	r2, r2, #5
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d100      	bne.n	80021c8 <HAL_TIM_ConfigClockSource+0x70>
 80021c6:	e088      	b.n	80022da <HAL_TIM_ConfigClockSource+0x182>
 80021c8:	2280      	movs	r2, #128	; 0x80
 80021ca:	0152      	lsls	r2, r2, #5
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d900      	bls.n	80021d2 <HAL_TIM_ConfigClockSource+0x7a>
 80021d0:	e07e      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x178>
 80021d2:	2b70      	cmp	r3, #112	; 0x70
 80021d4:	d018      	beq.n	8002208 <HAL_TIM_ConfigClockSource+0xb0>
 80021d6:	d900      	bls.n	80021da <HAL_TIM_ConfigClockSource+0x82>
 80021d8:	e07a      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x178>
 80021da:	2b60      	cmp	r3, #96	; 0x60
 80021dc:	d04f      	beq.n	800227e <HAL_TIM_ConfigClockSource+0x126>
 80021de:	d900      	bls.n	80021e2 <HAL_TIM_ConfigClockSource+0x8a>
 80021e0:	e076      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x178>
 80021e2:	2b50      	cmp	r3, #80	; 0x50
 80021e4:	d03b      	beq.n	800225e <HAL_TIM_ConfigClockSource+0x106>
 80021e6:	d900      	bls.n	80021ea <HAL_TIM_ConfigClockSource+0x92>
 80021e8:	e072      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x178>
 80021ea:	2b40      	cmp	r3, #64	; 0x40
 80021ec:	d057      	beq.n	800229e <HAL_TIM_ConfigClockSource+0x146>
 80021ee:	d900      	bls.n	80021f2 <HAL_TIM_ConfigClockSource+0x9a>
 80021f0:	e06e      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x178>
 80021f2:	2b30      	cmp	r3, #48	; 0x30
 80021f4:	d063      	beq.n	80022be <HAL_TIM_ConfigClockSource+0x166>
 80021f6:	d86b      	bhi.n	80022d0 <HAL_TIM_ConfigClockSource+0x178>
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	d060      	beq.n	80022be <HAL_TIM_ConfigClockSource+0x166>
 80021fc:	d868      	bhi.n	80022d0 <HAL_TIM_ConfigClockSource+0x178>
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d05d      	beq.n	80022be <HAL_TIM_ConfigClockSource+0x166>
 8002202:	2b10      	cmp	r3, #16
 8002204:	d05b      	beq.n	80022be <HAL_TIM_ConfigClockSource+0x166>
 8002206:	e063      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6899      	ldr	r1, [r3, #8]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f000 fb68 	bl	80028ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2277      	movs	r2, #119	; 0x77
 8002228:	4313      	orrs	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	609a      	str	r2, [r3, #8]
      break;
 8002234:	e052      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f000 fb51 	bl	80028ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	01c9      	lsls	r1, r1, #7
 8002258:	430a      	orrs	r2, r1
 800225a:	609a      	str	r2, [r3, #8]
      break;
 800225c:	e03e      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6818      	ldr	r0, [r3, #0]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	6859      	ldr	r1, [r3, #4]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	001a      	movs	r2, r3
 800226c:	f000 fac4 	bl	80027f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2150      	movs	r1, #80	; 0x50
 8002276:	0018      	movs	r0, r3
 8002278:	f000 fb1e 	bl	80028b8 <TIM_ITRx_SetConfig>
      break;
 800227c:	e02e      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	6859      	ldr	r1, [r3, #4]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	001a      	movs	r2, r3
 800228c:	f000 fae2 	bl	8002854 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2160      	movs	r1, #96	; 0x60
 8002296:	0018      	movs	r0, r3
 8002298:	f000 fb0e 	bl	80028b8 <TIM_ITRx_SetConfig>
      break;
 800229c:	e01e      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	001a      	movs	r2, r3
 80022ac:	f000 faa4 	bl	80027f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2140      	movs	r1, #64	; 0x40
 80022b6:	0018      	movs	r0, r3
 80022b8:	f000 fafe 	bl	80028b8 <TIM_ITRx_SetConfig>
      break;
 80022bc:	e00e      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	0019      	movs	r1, r3
 80022c8:	0010      	movs	r0, r2
 80022ca:	f000 faf5 	bl	80028b8 <TIM_ITRx_SetConfig>
      break;
 80022ce:	e005      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80022d0:	230f      	movs	r3, #15
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
      break;
 80022d8:	e000      	b.n	80022dc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80022da:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	223d      	movs	r2, #61	; 0x3d
 80022e0:	2101      	movs	r1, #1
 80022e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	223c      	movs	r2, #60	; 0x3c
 80022e8:	2100      	movs	r1, #0
 80022ea:	5499      	strb	r1, [r3, r2]

  return status;
 80022ec:	230f      	movs	r3, #15
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	781b      	ldrb	r3, [r3, #0]
}
 80022f2:	0018      	movs	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b004      	add	sp, #16
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	ffff00ff 	.word	0xffff00ff

08002300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a34      	ldr	r2, [pc, #208]	; (80023e4 <TIM_Base_SetConfig+0xe4>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d008      	beq.n	800232a <TIM_Base_SetConfig+0x2a>
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	05db      	lsls	r3, r3, #23
 800231e:	429a      	cmp	r2, r3
 8002320:	d003      	beq.n	800232a <TIM_Base_SetConfig+0x2a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a30      	ldr	r2, [pc, #192]	; (80023e8 <TIM_Base_SetConfig+0xe8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d108      	bne.n	800233c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2270      	movs	r2, #112	; 0x70
 800232e:	4393      	bics	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4313      	orrs	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a29      	ldr	r2, [pc, #164]	; (80023e4 <TIM_Base_SetConfig+0xe4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d018      	beq.n	8002376 <TIM_Base_SetConfig+0x76>
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	05db      	lsls	r3, r3, #23
 800234a:	429a      	cmp	r2, r3
 800234c:	d013      	beq.n	8002376 <TIM_Base_SetConfig+0x76>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a25      	ldr	r2, [pc, #148]	; (80023e8 <TIM_Base_SetConfig+0xe8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00f      	beq.n	8002376 <TIM_Base_SetConfig+0x76>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a24      	ldr	r2, [pc, #144]	; (80023ec <TIM_Base_SetConfig+0xec>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00b      	beq.n	8002376 <TIM_Base_SetConfig+0x76>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <TIM_Base_SetConfig+0xf0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d007      	beq.n	8002376 <TIM_Base_SetConfig+0x76>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <TIM_Base_SetConfig+0xf4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d003      	beq.n	8002376 <TIM_Base_SetConfig+0x76>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <TIM_Base_SetConfig+0xf8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d108      	bne.n	8002388 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4a20      	ldr	r2, [pc, #128]	; (80023fc <TIM_Base_SetConfig+0xfc>)
 800237a:	4013      	ands	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4313      	orrs	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2280      	movs	r2, #128	; 0x80
 800238c:	4393      	bics	r3, r2
 800238e:	001a      	movs	r2, r3
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a0c      	ldr	r2, [pc, #48]	; (80023e4 <TIM_Base_SetConfig+0xe4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00b      	beq.n	80023ce <TIM_Base_SetConfig+0xce>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a0d      	ldr	r2, [pc, #52]	; (80023f0 <TIM_Base_SetConfig+0xf0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <TIM_Base_SetConfig+0xce>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a0c      	ldr	r2, [pc, #48]	; (80023f4 <TIM_Base_SetConfig+0xf4>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d003      	beq.n	80023ce <TIM_Base_SetConfig+0xce>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <TIM_Base_SetConfig+0xf8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d103      	bne.n	80023d6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	615a      	str	r2, [r3, #20]
}
 80023dc:	46c0      	nop			; (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	b004      	add	sp, #16
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40012c00 	.word	0x40012c00
 80023e8:	40000400 	.word	0x40000400
 80023ec:	40002000 	.word	0x40002000
 80023f0:	40014000 	.word	0x40014000
 80023f4:	40014400 	.word	0x40014400
 80023f8:	40014800 	.word	0x40014800
 80023fc:	fffffcff 	.word	0xfffffcff

08002400 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	2201      	movs	r2, #1
 8002410:	4393      	bics	r3, r2
 8002412:	001a      	movs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2270      	movs	r2, #112	; 0x70
 800242e:	4393      	bics	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2203      	movs	r2, #3
 8002436:	4393      	bics	r3, r2
 8002438:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2202      	movs	r2, #2
 8002448:	4393      	bics	r3, r2
 800244a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a27      	ldr	r2, [pc, #156]	; (80024f8 <TIM_OC1_SetConfig+0xf8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00b      	beq.n	8002476 <TIM_OC1_SetConfig+0x76>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a26      	ldr	r2, [pc, #152]	; (80024fc <TIM_OC1_SetConfig+0xfc>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <TIM_OC1_SetConfig+0x76>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a25      	ldr	r2, [pc, #148]	; (8002500 <TIM_OC1_SetConfig+0x100>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d003      	beq.n	8002476 <TIM_OC1_SetConfig+0x76>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a24      	ldr	r2, [pc, #144]	; (8002504 <TIM_OC1_SetConfig+0x104>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d10c      	bne.n	8002490 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2208      	movs	r2, #8
 800247a:	4393      	bics	r3, r2
 800247c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2204      	movs	r2, #4
 800248c:	4393      	bics	r3, r2
 800248e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a19      	ldr	r2, [pc, #100]	; (80024f8 <TIM_OC1_SetConfig+0xf8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d00b      	beq.n	80024b0 <TIM_OC1_SetConfig+0xb0>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a18      	ldr	r2, [pc, #96]	; (80024fc <TIM_OC1_SetConfig+0xfc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d007      	beq.n	80024b0 <TIM_OC1_SetConfig+0xb0>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a17      	ldr	r2, [pc, #92]	; (8002500 <TIM_OC1_SetConfig+0x100>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d003      	beq.n	80024b0 <TIM_OC1_SetConfig+0xb0>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	4a16      	ldr	r2, [pc, #88]	; (8002504 <TIM_OC1_SetConfig+0x104>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d111      	bne.n	80024d4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4a15      	ldr	r2, [pc, #84]	; (8002508 <TIM_OC1_SetConfig+0x108>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	4a14      	ldr	r2, [pc, #80]	; (800250c <TIM_OC1_SetConfig+0x10c>)
 80024bc:	4013      	ands	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	621a      	str	r2, [r3, #32]
}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b006      	add	sp, #24
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	40012c00 	.word	0x40012c00
 80024fc:	40014000 	.word	0x40014000
 8002500:	40014400 	.word	0x40014400
 8002504:	40014800 	.word	0x40014800
 8002508:	fffffeff 	.word	0xfffffeff
 800250c:	fffffdff 	.word	0xfffffdff

08002510 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	2210      	movs	r2, #16
 8002520:	4393      	bics	r3, r2
 8002522:	001a      	movs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4a2e      	ldr	r2, [pc, #184]	; (80025f8 <TIM_OC2_SetConfig+0xe8>)
 800253e:	4013      	ands	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4a2d      	ldr	r2, [pc, #180]	; (80025fc <TIM_OC2_SetConfig+0xec>)
 8002546:	4013      	ands	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2220      	movs	r2, #32
 800255a:	4393      	bics	r3, r2
 800255c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	4313      	orrs	r3, r2
 8002568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a24      	ldr	r2, [pc, #144]	; (8002600 <TIM_OC2_SetConfig+0xf0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10d      	bne.n	800258e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	4393      	bics	r3, r2
 8002578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2240      	movs	r2, #64	; 0x40
 800258a:	4393      	bics	r3, r2
 800258c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a1b      	ldr	r2, [pc, #108]	; (8002600 <TIM_OC2_SetConfig+0xf0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00b      	beq.n	80025ae <TIM_OC2_SetConfig+0x9e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a1a      	ldr	r2, [pc, #104]	; (8002604 <TIM_OC2_SetConfig+0xf4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d007      	beq.n	80025ae <TIM_OC2_SetConfig+0x9e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a19      	ldr	r2, [pc, #100]	; (8002608 <TIM_OC2_SetConfig+0xf8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d003      	beq.n	80025ae <TIM_OC2_SetConfig+0x9e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a18      	ldr	r2, [pc, #96]	; (800260c <TIM_OC2_SetConfig+0xfc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d113      	bne.n	80025d6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4a17      	ldr	r2, [pc, #92]	; (8002610 <TIM_OC2_SetConfig+0x100>)
 80025b2:	4013      	ands	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4a16      	ldr	r2, [pc, #88]	; (8002614 <TIM_OC2_SetConfig+0x104>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	621a      	str	r2, [r3, #32]
}
 80025f0:	46c0      	nop			; (mov r8, r8)
 80025f2:	46bd      	mov	sp, r7
 80025f4:	b006      	add	sp, #24
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	ffff8fff 	.word	0xffff8fff
 80025fc:	fffffcff 	.word	0xfffffcff
 8002600:	40012c00 	.word	0x40012c00
 8002604:	40014000 	.word	0x40014000
 8002608:	40014400 	.word	0x40014400
 800260c:	40014800 	.word	0x40014800
 8002610:	fffffbff 	.word	0xfffffbff
 8002614:	fffff7ff 	.word	0xfffff7ff

08002618 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a35      	ldr	r2, [pc, #212]	; (80026fc <TIM_OC3_SetConfig+0xe4>)
 8002628:	401a      	ands	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2270      	movs	r2, #112	; 0x70
 8002644:	4393      	bics	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2203      	movs	r2, #3
 800264c:	4393      	bics	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	4313      	orrs	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	4a28      	ldr	r2, [pc, #160]	; (8002700 <TIM_OC3_SetConfig+0xe8>)
 800265e:	4013      	ands	r3, r2
 8002660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	021b      	lsls	r3, r3, #8
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	4313      	orrs	r3, r2
 800266c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a24      	ldr	r2, [pc, #144]	; (8002704 <TIM_OC3_SetConfig+0xec>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d10d      	bne.n	8002692 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	4a23      	ldr	r2, [pc, #140]	; (8002708 <TIM_OC3_SetConfig+0xf0>)
 800267a:	4013      	ands	r3, r2
 800267c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	4a1f      	ldr	r2, [pc, #124]	; (800270c <TIM_OC3_SetConfig+0xf4>)
 800268e:	4013      	ands	r3, r2
 8002690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a1b      	ldr	r2, [pc, #108]	; (8002704 <TIM_OC3_SetConfig+0xec>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d00b      	beq.n	80026b2 <TIM_OC3_SetConfig+0x9a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <TIM_OC3_SetConfig+0xf8>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d007      	beq.n	80026b2 <TIM_OC3_SetConfig+0x9a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <TIM_OC3_SetConfig+0xfc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d003      	beq.n	80026b2 <TIM_OC3_SetConfig+0x9a>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a1a      	ldr	r2, [pc, #104]	; (8002718 <TIM_OC3_SetConfig+0x100>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d113      	bne.n	80026da <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	4a19      	ldr	r2, [pc, #100]	; (800271c <TIM_OC3_SetConfig+0x104>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4a18      	ldr	r2, [pc, #96]	; (8002720 <TIM_OC3_SetConfig+0x108>)
 80026be:	4013      	ands	r3, r2
 80026c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	621a      	str	r2, [r3, #32]
}
 80026f4:	46c0      	nop			; (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b006      	add	sp, #24
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	fffffeff 	.word	0xfffffeff
 8002700:	fffffdff 	.word	0xfffffdff
 8002704:	40012c00 	.word	0x40012c00
 8002708:	fffff7ff 	.word	0xfffff7ff
 800270c:	fffffbff 	.word	0xfffffbff
 8002710:	40014000 	.word	0x40014000
 8002714:	40014400 	.word	0x40014400
 8002718:	40014800 	.word	0x40014800
 800271c:	ffffefff 	.word	0xffffefff
 8002720:	ffffdfff 	.word	0xffffdfff

08002724 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4a28      	ldr	r2, [pc, #160]	; (80027d4 <TIM_OC4_SetConfig+0xb0>)
 8002734:	401a      	ands	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <TIM_OC4_SetConfig+0xb4>)
 8002750:	4013      	ands	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4a21      	ldr	r2, [pc, #132]	; (80027dc <TIM_OC4_SetConfig+0xb8>)
 8002758:	4013      	ands	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <TIM_OC4_SetConfig+0xbc>)
 800276c:	4013      	ands	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	031b      	lsls	r3, r3, #12
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <TIM_OC4_SetConfig+0xc0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d00b      	beq.n	800279c <TIM_OC4_SetConfig+0x78>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <TIM_OC4_SetConfig+0xc4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d007      	beq.n	800279c <TIM_OC4_SetConfig+0x78>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a17      	ldr	r2, [pc, #92]	; (80027ec <TIM_OC4_SetConfig+0xc8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d003      	beq.n	800279c <TIM_OC4_SetConfig+0x78>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a16      	ldr	r2, [pc, #88]	; (80027f0 <TIM_OC4_SetConfig+0xcc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d109      	bne.n	80027b0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	4a15      	ldr	r2, [pc, #84]	; (80027f4 <TIM_OC4_SetConfig+0xd0>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	019b      	lsls	r3, r3, #6
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	621a      	str	r2, [r3, #32]
}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b006      	add	sp, #24
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	ffffefff 	.word	0xffffefff
 80027d8:	ffff8fff 	.word	0xffff8fff
 80027dc:	fffffcff 	.word	0xfffffcff
 80027e0:	ffffdfff 	.word	0xffffdfff
 80027e4:	40012c00 	.word	0x40012c00
 80027e8:	40014000 	.word	0x40014000
 80027ec:	40014400 	.word	0x40014400
 80027f0:	40014800 	.word	0x40014800
 80027f4:	ffffbfff 	.word	0xffffbfff

080027f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	2201      	movs	r2, #1
 8002810:	4393      	bics	r3, r2
 8002812:	001a      	movs	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	22f0      	movs	r2, #240	; 0xf0
 8002822:	4393      	bics	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	220a      	movs	r2, #10
 8002834:	4393      	bics	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	621a      	str	r2, [r3, #32]
}
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	b006      	add	sp, #24
 8002852:	bd80      	pop	{r7, pc}

08002854 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	2210      	movs	r2, #16
 8002866:	4393      	bics	r3, r2
 8002868:	001a      	movs	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	4a0d      	ldr	r2, [pc, #52]	; (80028b4 <TIM_TI2_ConfigInputStage+0x60>)
 800287e:	4013      	ands	r3, r2
 8002880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	031b      	lsls	r3, r3, #12
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	22a0      	movs	r2, #160	; 0xa0
 8002890:	4393      	bics	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	621a      	str	r2, [r3, #32]
}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b006      	add	sp, #24
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	ffff0fff 	.word	0xffff0fff

080028b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2270      	movs	r2, #112	; 0x70
 80028cc:	4393      	bics	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	2207      	movs	r2, #7
 80028d8:	4313      	orrs	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	609a      	str	r2, [r3, #8]
}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b004      	add	sp, #16
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	4a09      	ldr	r2, [pc, #36]	; (8002928 <TIM_ETR_SetConfig+0x3c>)
 8002904:	4013      	ands	r3, r2
 8002906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	021a      	lsls	r2, r3, #8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	431a      	orrs	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	4313      	orrs	r3, r2
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	609a      	str	r2, [r3, #8]
}
 8002920:	46c0      	nop			; (mov r8, r8)
 8002922:	46bd      	mov	sp, r7
 8002924:	b006      	add	sp, #24
 8002926:	bd80      	pop	{r7, pc}
 8002928:	ffff00ff 	.word	0xffff00ff

0800292c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	221f      	movs	r2, #31
 800293c:	4013      	ands	r3, r2
 800293e:	2201      	movs	r2, #1
 8002940:	409a      	lsls	r2, r3
 8002942:	0013      	movs	r3, r2
 8002944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	43d2      	mvns	r2, r2
 800294e:	401a      	ands	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a1a      	ldr	r2, [r3, #32]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	211f      	movs	r1, #31
 800295c:	400b      	ands	r3, r1
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4099      	lsls	r1, r3
 8002962:	000b      	movs	r3, r1
 8002964:	431a      	orrs	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	621a      	str	r2, [r3, #32]
}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	46bd      	mov	sp, r7
 800296e:	b006      	add	sp, #24
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	223c      	movs	r2, #60	; 0x3c
 8002982:	5c9b      	ldrb	r3, [r3, r2]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002988:	2302      	movs	r3, #2
 800298a:	e047      	b.n	8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	223c      	movs	r2, #60	; 0x3c
 8002990:	2101      	movs	r1, #1
 8002992:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	223d      	movs	r2, #61	; 0x3d
 8002998:	2102      	movs	r1, #2
 800299a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2270      	movs	r2, #112	; 0x70
 80029b0:	4393      	bics	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a16      	ldr	r2, [pc, #88]	; (8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00f      	beq.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	05db      	lsls	r3, r3, #23
 80029d8:	429a      	cmp	r2, r3
 80029da:	d009      	beq.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a11      	ldr	r2, [pc, #68]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d004      	beq.n	80029f0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a10      	ldr	r2, [pc, #64]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d10c      	bne.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2280      	movs	r2, #128	; 0x80
 80029f4:	4393      	bics	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	223d      	movs	r2, #61	; 0x3d
 8002a0e:	2101      	movs	r1, #1
 8002a10:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	223c      	movs	r2, #60	; 0x3c
 8002a16:	2100      	movs	r1, #0
 8002a18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b004      	add	sp, #16
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40012c00 	.word	0x40012c00
 8002a28:	40000400 	.word	0x40000400
 8002a2c:	40014000 	.word	0x40014000

08002a30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b0ab      	sub	sp, #172	; 0xac
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	22a4      	movs	r2, #164	; 0xa4
 8002a40:	18b9      	adds	r1, r7, r2
 8002a42:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	20a0      	movs	r0, #160	; 0xa0
 8002a4c:	1839      	adds	r1, r7, r0
 8002a4e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	219c      	movs	r1, #156	; 0x9c
 8002a58:	1879      	adds	r1, r7, r1
 8002a5a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a5c:	0011      	movs	r1, r2
 8002a5e:	18bb      	adds	r3, r7, r2
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a99      	ldr	r2, [pc, #612]	; (8002cc8 <HAL_UART_IRQHandler+0x298>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	2298      	movs	r2, #152	; 0x98
 8002a68:	18bc      	adds	r4, r7, r2
 8002a6a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002a6c:	18bb      	adds	r3, r7, r2
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d114      	bne.n	8002a9e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a74:	187b      	adds	r3, r7, r1
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	d00f      	beq.n	8002a9e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a7e:	183b      	adds	r3, r7, r0
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2220      	movs	r2, #32
 8002a84:	4013      	ands	r3, r2
 8002a86:	d00a      	beq.n	8002a9e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d100      	bne.n	8002a92 <HAL_UART_IRQHandler+0x62>
 8002a90:	e296      	b.n	8002fc0 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	0010      	movs	r0, r2
 8002a9a:	4798      	blx	r3
      }
      return;
 8002a9c:	e290      	b.n	8002fc0 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a9e:	2398      	movs	r3, #152	; 0x98
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d100      	bne.n	8002aaa <HAL_UART_IRQHandler+0x7a>
 8002aa8:	e114      	b.n	8002cd4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002aaa:	239c      	movs	r3, #156	; 0x9c
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d106      	bne.n	8002ac4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ab6:	23a0      	movs	r3, #160	; 0xa0
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a83      	ldr	r2, [pc, #524]	; (8002ccc <HAL_UART_IRQHandler+0x29c>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d100      	bne.n	8002ac4 <HAL_UART_IRQHandler+0x94>
 8002ac2:	e107      	b.n	8002cd4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ac4:	23a4      	movs	r3, #164	; 0xa4
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2201      	movs	r2, #1
 8002acc:	4013      	ands	r3, r2
 8002ace:	d012      	beq.n	8002af6 <HAL_UART_IRQHandler+0xc6>
 8002ad0:	23a0      	movs	r3, #160	; 0xa0
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	005b      	lsls	r3, r3, #1
 8002ada:	4013      	ands	r3, r2
 8002adc:	d00b      	beq.n	8002af6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2280      	movs	r2, #128	; 0x80
 8002aea:	589b      	ldr	r3, [r3, r2]
 8002aec:	2201      	movs	r2, #1
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2180      	movs	r1, #128	; 0x80
 8002af4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002af6:	23a4      	movs	r3, #164	; 0xa4
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2202      	movs	r2, #2
 8002afe:	4013      	ands	r3, r2
 8002b00:	d011      	beq.n	8002b26 <HAL_UART_IRQHandler+0xf6>
 8002b02:	239c      	movs	r3, #156	; 0x9c
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d00b      	beq.n	8002b26 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2202      	movs	r2, #2
 8002b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2280      	movs	r2, #128	; 0x80
 8002b1a:	589b      	ldr	r3, [r3, r2]
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2180      	movs	r1, #128	; 0x80
 8002b24:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b26:	23a4      	movs	r3, #164	; 0xa4
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d011      	beq.n	8002b56 <HAL_UART_IRQHandler+0x126>
 8002b32:	239c      	movs	r3, #156	; 0x9c
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d00b      	beq.n	8002b56 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2204      	movs	r2, #4
 8002b44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2280      	movs	r2, #128	; 0x80
 8002b4a:	589b      	ldr	r3, [r3, r2]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2180      	movs	r1, #128	; 0x80
 8002b54:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b56:	23a4      	movs	r3, #164	; 0xa4
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d017      	beq.n	8002b92 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b62:	23a0      	movs	r3, #160	; 0xa0
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d105      	bne.n	8002b7a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b6e:	239c      	movs	r3, #156	; 0x9c
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2201      	movs	r2, #1
 8002b76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b78:	d00b      	beq.n	8002b92 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2208      	movs	r2, #8
 8002b80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2280      	movs	r2, #128	; 0x80
 8002b86:	589b      	ldr	r3, [r3, r2]
 8002b88:	2208      	movs	r2, #8
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2180      	movs	r1, #128	; 0x80
 8002b90:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b92:	23a4      	movs	r3, #164	; 0xa4
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	; 0x80
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d013      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x198>
 8002ba0:	23a0      	movs	r3, #160	; 0xa0
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	04db      	lsls	r3, r3, #19
 8002baa:	4013      	ands	r3, r2
 8002bac:	d00c      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2280      	movs	r2, #128	; 0x80
 8002bb4:	0112      	lsls	r2, r2, #4
 8002bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2280      	movs	r2, #128	; 0x80
 8002bbc:	589b      	ldr	r3, [r3, r2]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2180      	movs	r1, #128	; 0x80
 8002bc6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2280      	movs	r2, #128	; 0x80
 8002bcc:	589b      	ldr	r3, [r3, r2]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d100      	bne.n	8002bd4 <HAL_UART_IRQHandler+0x1a4>
 8002bd2:	e1f7      	b.n	8002fc4 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bd4:	23a4      	movs	r3, #164	; 0xa4
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d00e      	beq.n	8002bfe <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002be0:	23a0      	movs	r3, #160	; 0xa0
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2220      	movs	r2, #32
 8002be8:	4013      	ands	r3, r2
 8002bea:	d008      	beq.n	8002bfe <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d004      	beq.n	8002bfe <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	0010      	movs	r0, r2
 8002bfc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	589b      	ldr	r3, [r3, r2]
 8002c04:	2194      	movs	r1, #148	; 0x94
 8002c06:	187a      	adds	r2, r7, r1
 8002c08:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2240      	movs	r2, #64	; 0x40
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	d004      	beq.n	8002c22 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c18:	187b      	adds	r3, r7, r1
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2228      	movs	r2, #40	; 0x28
 8002c1e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c20:	d047      	beq.n	8002cb2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f000 f9f7 	bl	8003018 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2240      	movs	r2, #64	; 0x40
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b40      	cmp	r3, #64	; 0x40
 8002c36:	d137      	bne.n	8002ca8 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c38:	f3ef 8310 	mrs	r3, PRIMASK
 8002c3c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c40:	2090      	movs	r0, #144	; 0x90
 8002c42:	183a      	adds	r2, r7, r0
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	2301      	movs	r3, #1
 8002c48:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c4c:	f383 8810 	msr	PRIMASK, r3
}
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2140      	movs	r1, #64	; 0x40
 8002c5e:	438a      	bics	r2, r1
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	183b      	adds	r3, r7, r0
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c6a:	f383 8810 	msr	PRIMASK, r3
}
 8002c6e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d012      	beq.n	8002c9e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	4a14      	ldr	r2, [pc, #80]	; (8002cd0 <HAL_UART_IRQHandler+0x2a0>)
 8002c7e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7fe fd89 	bl	800179c <HAL_DMA_Abort_IT>
 8002c8a:	1e03      	subs	r3, r0, #0
 8002c8c:	d01a      	beq.n	8002cc4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	0018      	movs	r0, r3
 8002c9a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9c:	e012      	b.n	8002cc4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f000 f9a5 	bl	8002ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca6:	e00d      	b.n	8002cc4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	0018      	movs	r0, r3
 8002cac:	f000 f9a0 	bl	8002ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb0:	e008      	b.n	8002cc4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 f99b 	bl	8002ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2280      	movs	r2, #128	; 0x80
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002cc2:	e17f      	b.n	8002fc4 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc4:	46c0      	nop			; (mov r8, r8)
    return;
 8002cc6:	e17d      	b.n	8002fc4 <HAL_UART_IRQHandler+0x594>
 8002cc8:	0000080f 	.word	0x0000080f
 8002ccc:	04000120 	.word	0x04000120
 8002cd0:	080030dd 	.word	0x080030dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d000      	beq.n	8002cde <HAL_UART_IRQHandler+0x2ae>
 8002cdc:	e131      	b.n	8002f42 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002cde:	23a4      	movs	r3, #164	; 0xa4
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d100      	bne.n	8002cec <HAL_UART_IRQHandler+0x2bc>
 8002cea:	e12a      	b.n	8002f42 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002cec:	23a0      	movs	r3, #160	; 0xa0
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2210      	movs	r2, #16
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d100      	bne.n	8002cfa <HAL_UART_IRQHandler+0x2ca>
 8002cf8:	e123      	b.n	8002f42 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2210      	movs	r2, #16
 8002d00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2240      	movs	r2, #64	; 0x40
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b40      	cmp	r3, #64	; 0x40
 8002d0e:	d000      	beq.n	8002d12 <HAL_UART_IRQHandler+0x2e2>
 8002d10:	e09b      	b.n	8002e4a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	217e      	movs	r1, #126	; 0x7e
 8002d1c:	187b      	adds	r3, r7, r1
 8002d1e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002d20:	187b      	adds	r3, r7, r1
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d100      	bne.n	8002d2a <HAL_UART_IRQHandler+0x2fa>
 8002d28:	e14e      	b.n	8002fc8 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2258      	movs	r2, #88	; 0x58
 8002d2e:	5a9b      	ldrh	r3, [r3, r2]
 8002d30:	187a      	adds	r2, r7, r1
 8002d32:	8812      	ldrh	r2, [r2, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d300      	bcc.n	8002d3a <HAL_UART_IRQHandler+0x30a>
 8002d38:	e146      	b.n	8002fc8 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	187a      	adds	r2, r7, r1
 8002d3e:	215a      	movs	r1, #90	; 0x5a
 8002d40:	8812      	ldrh	r2, [r2, #0]
 8002d42:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d06e      	beq.n	8002e2c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d4e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d52:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d56:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d58:	2301      	movs	r3, #1
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d5e:	f383 8810 	msr	PRIMASK, r3
}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	499a      	ldr	r1, [pc, #616]	; (8002fd8 <HAL_UART_IRQHandler+0x5a8>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d76:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7a:	f383 8810 	msr	PRIMASK, r3
}
 8002d7e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d80:	f3ef 8310 	mrs	r3, PRIMASK
 8002d84:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d88:	677b      	str	r3, [r7, #116]	; 0x74
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d90:	f383 8810 	msr	PRIMASK, r3
}
 8002d94:	46c0      	nop			; (mov r8, r8)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2101      	movs	r1, #1
 8002da2:	438a      	bics	r2, r1
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002da8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dac:	f383 8810 	msr	PRIMASK, r3
}
 8002db0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db2:	f3ef 8310 	mrs	r3, PRIMASK
 8002db6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dba:	673b      	str	r3, [r7, #112]	; 0x70
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc2:	f383 8810 	msr	PRIMASK, r3
}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2140      	movs	r1, #64	; 0x40
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dda:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dde:	f383 8810 	msr	PRIMASK, r3
}
 8002de2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df0:	f3ef 8310 	mrs	r3, PRIMASK
 8002df4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e00:	f383 8810 	msr	PRIMASK, r3
}
 8002e04:	46c0      	nop			; (mov r8, r8)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2110      	movs	r1, #16
 8002e12:	438a      	bics	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e18:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e1c:	f383 8810 	msr	PRIMASK, r3
}
 8002e20:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	0018      	movs	r0, r3
 8002e28:	f7fe fc80 	bl	800172c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2258      	movs	r2, #88	; 0x58
 8002e30:	5a9a      	ldrh	r2, [r3, r2]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	215a      	movs	r1, #90	; 0x5a
 8002e36:	5a5b      	ldrh	r3, [r3, r1]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	0011      	movs	r1, r2
 8002e42:	0018      	movs	r0, r3
 8002e44:	f000 f8dc 	bl	8003000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e48:	e0be      	b.n	8002fc8 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2258      	movs	r2, #88	; 0x58
 8002e4e:	5a99      	ldrh	r1, [r3, r2]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	225a      	movs	r2, #90	; 0x5a
 8002e54:	5a9b      	ldrh	r3, [r3, r2]
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	208e      	movs	r0, #142	; 0x8e
 8002e5a:	183b      	adds	r3, r7, r0
 8002e5c:	1a8a      	subs	r2, r1, r2
 8002e5e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	225a      	movs	r2, #90	; 0x5a
 8002e64:	5a9b      	ldrh	r3, [r3, r2]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d100      	bne.n	8002e6e <HAL_UART_IRQHandler+0x43e>
 8002e6c:	e0ae      	b.n	8002fcc <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8002e6e:	183b      	adds	r3, r7, r0
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d100      	bne.n	8002e78 <HAL_UART_IRQHandler+0x448>
 8002e76:	e0a9      	b.n	8002fcc <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e78:	f3ef 8310 	mrs	r3, PRIMASK
 8002e7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e80:	2488      	movs	r4, #136	; 0x88
 8002e82:	193a      	adds	r2, r7, r4
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	2301      	movs	r3, #1
 8002e88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f383 8810 	msr	PRIMASK, r3
}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	494f      	ldr	r1, [pc, #316]	; (8002fdc <HAL_UART_IRQHandler+0x5ac>)
 8002e9e:	400a      	ands	r2, r1
 8002ea0:	601a      	str	r2, [r3, #0]
 8002ea2:	193b      	adds	r3, r7, r4
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f383 8810 	msr	PRIMASK, r3
}
 8002eae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8002eb4:	61bb      	str	r3, [r7, #24]
  return(result);
 8002eb6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eb8:	2484      	movs	r4, #132	; 0x84
 8002eba:	193a      	adds	r2, r7, r4
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f383 8810 	msr	PRIMASK, r3
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	438a      	bics	r2, r1
 8002ed8:	609a      	str	r2, [r3, #8]
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	f383 8810 	msr	PRIMASK, r3
}
 8002ee6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002efa:	f3ef 8310 	mrs	r3, PRIMASK
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f02:	2480      	movs	r4, #128	; 0x80
 8002f04:	193a      	adds	r2, r7, r4
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	2301      	movs	r3, #1
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	f383 8810 	msr	PRIMASK, r3
}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2110      	movs	r1, #16
 8002f20:	438a      	bics	r2, r1
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	193b      	adds	r3, r7, r4
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	f383 8810 	msr	PRIMASK, r3
}
 8002f30:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f32:	183b      	adds	r3, r7, r0
 8002f34:	881a      	ldrh	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	0011      	movs	r1, r2
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	f000 f860 	bl	8003000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f40:	e044      	b.n	8002fcc <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f42:	23a4      	movs	r3, #164	; 0xa4
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	2380      	movs	r3, #128	; 0x80
 8002f4a:	035b      	lsls	r3, r3, #13
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d010      	beq.n	8002f72 <HAL_UART_IRQHandler+0x542>
 8002f50:	239c      	movs	r3, #156	; 0x9c
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	03db      	lsls	r3, r3, #15
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2280      	movs	r2, #128	; 0x80
 8002f64:	0352      	lsls	r2, r2, #13
 8002f66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f000 f8f8 	bl	8003160 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f70:	e02f      	b.n	8002fd2 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f72:	23a4      	movs	r3, #164	; 0xa4
 8002f74:	18fb      	adds	r3, r7, r3
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2280      	movs	r2, #128	; 0x80
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d00f      	beq.n	8002f9e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f7e:	23a0      	movs	r3, #160	; 0xa0
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2280      	movs	r2, #128	; 0x80
 8002f86:	4013      	ands	r3, r2
 8002f88:	d009      	beq.n	8002f9e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01e      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	0010      	movs	r0, r2
 8002f9a:	4798      	blx	r3
    }
    return;
 8002f9c:	e018      	b.n	8002fd0 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f9e:	23a4      	movs	r3, #164	; 0xa4
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2240      	movs	r2, #64	; 0x40
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x5a2>
 8002faa:	23a0      	movs	r3, #160	; 0xa0
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2240      	movs	r2, #64	; 0x40
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d00d      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f000 f8a6 	bl	800310a <UART_EndTransmit_IT>
    return;
 8002fbe:	e008      	b.n	8002fd2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002fc0:	46c0      	nop			; (mov r8, r8)
 8002fc2:	e006      	b.n	8002fd2 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002fc4:	46c0      	nop			; (mov r8, r8)
 8002fc6:	e004      	b.n	8002fd2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002fc8:	46c0      	nop			; (mov r8, r8)
 8002fca:	e002      	b.n	8002fd2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	e000      	b.n	8002fd2 <HAL_UART_IRQHandler+0x5a2>
    return;
 8002fd0:	46c0      	nop			; (mov r8, r8)
  }

}
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b02b      	add	sp, #172	; 0xac
 8002fd6:	bd90      	pop	{r4, r7, pc}
 8002fd8:	fffffeff 	.word	0xfffffeff
 8002fdc:	fffffedf 	.word	0xfffffedf

08002fe0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002fe8:	46c0      	nop			; (mov r8, r8)
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b002      	add	sp, #8
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ff8:	46c0      	nop			; (mov r8, r8)
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b002      	add	sp, #8
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	000a      	movs	r2, r1
 800300a:	1cbb      	adds	r3, r7, #2
 800300c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	46bd      	mov	sp, r7
 8003012:	b002      	add	sp, #8
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08e      	sub	sp, #56	; 0x38
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003020:	f3ef 8310 	mrs	r3, PRIMASK
 8003024:	617b      	str	r3, [r7, #20]
  return(result);
 8003026:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003028:	637b      	str	r3, [r7, #52]	; 0x34
 800302a:	2301      	movs	r3, #1
 800302c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f383 8810 	msr	PRIMASK, r3
}
 8003034:	46c0      	nop			; (mov r8, r8)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4925      	ldr	r1, [pc, #148]	; (80030d8 <UART_EndRxTransfer+0xc0>)
 8003042:	400a      	ands	r2, r1
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003048:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f383 8810 	msr	PRIMASK, r3
}
 8003050:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003052:	f3ef 8310 	mrs	r3, PRIMASK
 8003056:	623b      	str	r3, [r7, #32]
  return(result);
 8003058:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800305a:	633b      	str	r3, [r7, #48]	; 0x30
 800305c:	2301      	movs	r3, #1
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	f383 8810 	msr	PRIMASK, r3
}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2101      	movs	r1, #1
 8003074:	438a      	bics	r2, r1
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	f383 8810 	msr	PRIMASK, r3
}
 8003082:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003088:	2b01      	cmp	r3, #1
 800308a:	d118      	bne.n	80030be <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308c:	f3ef 8310 	mrs	r3, PRIMASK
 8003090:	60bb      	str	r3, [r7, #8]
  return(result);
 8003092:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003096:	2301      	movs	r3, #1
 8003098:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f383 8810 	msr	PRIMASK, r3
}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2110      	movs	r1, #16
 80030ae:	438a      	bics	r2, r1
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f383 8810 	msr	PRIMASK, r3
}
 80030bc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	665a      	str	r2, [r3, #100]	; 0x64
}
 80030d0:	46c0      	nop			; (mov r8, r8)
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b00e      	add	sp, #56	; 0x38
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	fffffedf 	.word	0xfffffedf

080030dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	225a      	movs	r2, #90	; 0x5a
 80030ee:	2100      	movs	r1, #0
 80030f0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2252      	movs	r2, #82	; 0x52
 80030f6:	2100      	movs	r1, #0
 80030f8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f7ff ff77 	bl	8002ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	b004      	add	sp, #16
 8003108:	bd80      	pop	{r7, pc}

0800310a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b086      	sub	sp, #24
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003112:	f3ef 8310 	mrs	r3, PRIMASK
 8003116:	60bb      	str	r3, [r7, #8]
  return(result);
 8003118:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	2301      	movs	r3, #1
 800311e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f383 8810 	msr	PRIMASK, r3
}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2140      	movs	r1, #64	; 0x40
 8003134:	438a      	bics	r2, r1
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f383 8810 	msr	PRIMASK, r3
}
 8003142:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	0018      	movs	r0, r3
 8003154:	f7ff ff44 	bl	8002fe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003158:	46c0      	nop			; (mov r8, r8)
 800315a:	46bd      	mov	sp, r7
 800315c:	b006      	add	sp, #24
 800315e:	bd80      	pop	{r7, pc}

08003160 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b002      	add	sp, #8
 800316e:	bd80      	pop	{r7, pc}

08003170 <__libc_init_array>:
 8003170:	b570      	push	{r4, r5, r6, lr}
 8003172:	2600      	movs	r6, #0
 8003174:	4d0c      	ldr	r5, [pc, #48]	; (80031a8 <__libc_init_array+0x38>)
 8003176:	4c0d      	ldr	r4, [pc, #52]	; (80031ac <__libc_init_array+0x3c>)
 8003178:	1b64      	subs	r4, r4, r5
 800317a:	10a4      	asrs	r4, r4, #2
 800317c:	42a6      	cmp	r6, r4
 800317e:	d109      	bne.n	8003194 <__libc_init_array+0x24>
 8003180:	2600      	movs	r6, #0
 8003182:	f000 f821 	bl	80031c8 <_init>
 8003186:	4d0a      	ldr	r5, [pc, #40]	; (80031b0 <__libc_init_array+0x40>)
 8003188:	4c0a      	ldr	r4, [pc, #40]	; (80031b4 <__libc_init_array+0x44>)
 800318a:	1b64      	subs	r4, r4, r5
 800318c:	10a4      	asrs	r4, r4, #2
 800318e:	42a6      	cmp	r6, r4
 8003190:	d105      	bne.n	800319e <__libc_init_array+0x2e>
 8003192:	bd70      	pop	{r4, r5, r6, pc}
 8003194:	00b3      	lsls	r3, r6, #2
 8003196:	58eb      	ldr	r3, [r5, r3]
 8003198:	4798      	blx	r3
 800319a:	3601      	adds	r6, #1
 800319c:	e7ee      	b.n	800317c <__libc_init_array+0xc>
 800319e:	00b3      	lsls	r3, r6, #2
 80031a0:	58eb      	ldr	r3, [r5, r3]
 80031a2:	4798      	blx	r3
 80031a4:	3601      	adds	r6, #1
 80031a6:	e7f2      	b.n	800318e <__libc_init_array+0x1e>
 80031a8:	080031e0 	.word	0x080031e0
 80031ac:	080031e0 	.word	0x080031e0
 80031b0:	080031e0 	.word	0x080031e0
 80031b4:	080031e4 	.word	0x080031e4

080031b8 <memset>:
 80031b8:	0003      	movs	r3, r0
 80031ba:	1882      	adds	r2, r0, r2
 80031bc:	4293      	cmp	r3, r2
 80031be:	d100      	bne.n	80031c2 <memset+0xa>
 80031c0:	4770      	bx	lr
 80031c2:	7019      	strb	r1, [r3, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	e7f9      	b.n	80031bc <memset+0x4>

080031c8 <_init>:
 80031c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ce:	bc08      	pop	{r3}
 80031d0:	469e      	mov	lr, r3
 80031d2:	4770      	bx	lr

080031d4 <_fini>:
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031da:	bc08      	pop	{r3}
 80031dc:	469e      	mov	lr, r3
 80031de:	4770      	bx	lr
